//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \GenerateUnits.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add Scripts\UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

#if !WINDOWS_UWP
// Extension methods/overloads not supported in Universal Windows Platform (WinRT Components)
namespace UnitsNet.Extensions.NumberToElasticity
{
    public static class NumberToElasticityExtensions
    {
        #region Atmosphere

        /// <inheritdoc cref="Elasticity.FromAtmospheres(double)"/>
        public static Elasticity Atmospheres(this int value) => Elasticity.FromAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromAtmospheres(double?)"/>
        public static Elasticity? Atmospheres(this int? value) => Elasticity.FromAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromAtmospheres(double)"/>
        public static Elasticity Atmospheres(this long value) => Elasticity.FromAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromAtmospheres(double?)"/>
        public static Elasticity? Atmospheres(this long? value) => Elasticity.FromAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromAtmospheres(double)"/>
        public static Elasticity Atmospheres(this double value) => Elasticity.FromAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromAtmospheres(double?)"/>
        public static Elasticity? Atmospheres(this double? value) => Elasticity.FromAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromAtmospheres(double)"/>
        public static Elasticity Atmospheres(this float value) => Elasticity.FromAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromAtmospheres(double?)"/>
        public static Elasticity? Atmospheres(this float? value) => Elasticity.FromAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromAtmospheres(double)"/>
        public static Elasticity Atmospheres(this decimal value) => Elasticity.FromAtmospheres(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromAtmospheres(double?)"/>
        public static Elasticity? Atmospheres(this decimal? value) => Elasticity.FromAtmospheres(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Bar

        /// <inheritdoc cref="Elasticity.FromBars(double)"/>
        public static Elasticity Bars(this int value) => Elasticity.FromBars(value);

        /// <inheritdoc cref="Elasticity.FromBars(double?)"/>
        public static Elasticity? Bars(this int? value) => Elasticity.FromBars(value);

        /// <inheritdoc cref="Elasticity.FromBars(double)"/>
        public static Elasticity Bars(this long value) => Elasticity.FromBars(value);

        /// <inheritdoc cref="Elasticity.FromBars(double?)"/>
        public static Elasticity? Bars(this long? value) => Elasticity.FromBars(value);

        /// <inheritdoc cref="Elasticity.FromBars(double)"/>
        public static Elasticity Bars(this double value) => Elasticity.FromBars(value);

        /// <inheritdoc cref="Elasticity.FromBars(double?)"/>
        public static Elasticity? Bars(this double? value) => Elasticity.FromBars(value);

        /// <inheritdoc cref="Elasticity.FromBars(double)"/>
        public static Elasticity Bars(this float value) => Elasticity.FromBars(value);

        /// <inheritdoc cref="Elasticity.FromBars(double?)"/>
        public static Elasticity? Bars(this float? value) => Elasticity.FromBars(value);

        /// <inheritdoc cref="Elasticity.FromBars(double)"/>
        public static Elasticity Bars(this decimal value) => Elasticity.FromBars(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromBars(double?)"/>
        public static Elasticity? Bars(this decimal? value) => Elasticity.FromBars(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Centibar

        /// <inheritdoc cref="Elasticity.FromCentibars(double)"/>
        public static Elasticity Centibars(this int value) => Elasticity.FromCentibars(value);

        /// <inheritdoc cref="Elasticity.FromCentibars(double?)"/>
        public static Elasticity? Centibars(this int? value) => Elasticity.FromCentibars(value);

        /// <inheritdoc cref="Elasticity.FromCentibars(double)"/>
        public static Elasticity Centibars(this long value) => Elasticity.FromCentibars(value);

        /// <inheritdoc cref="Elasticity.FromCentibars(double?)"/>
        public static Elasticity? Centibars(this long? value) => Elasticity.FromCentibars(value);

        /// <inheritdoc cref="Elasticity.FromCentibars(double)"/>
        public static Elasticity Centibars(this double value) => Elasticity.FromCentibars(value);

        /// <inheritdoc cref="Elasticity.FromCentibars(double?)"/>
        public static Elasticity? Centibars(this double? value) => Elasticity.FromCentibars(value);

        /// <inheritdoc cref="Elasticity.FromCentibars(double)"/>
        public static Elasticity Centibars(this float value) => Elasticity.FromCentibars(value);

        /// <inheritdoc cref="Elasticity.FromCentibars(double?)"/>
        public static Elasticity? Centibars(this float? value) => Elasticity.FromCentibars(value);

        /// <inheritdoc cref="Elasticity.FromCentibars(double)"/>
        public static Elasticity Centibars(this decimal value) => Elasticity.FromCentibars(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromCentibars(double?)"/>
        public static Elasticity? Centibars(this decimal? value) => Elasticity.FromCentibars(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Decapascal

        /// <inheritdoc cref="Elasticity.FromDecapascals(double)"/>
        public static Elasticity Decapascals(this int value) => Elasticity.FromDecapascals(value);

        /// <inheritdoc cref="Elasticity.FromDecapascals(double?)"/>
        public static Elasticity? Decapascals(this int? value) => Elasticity.FromDecapascals(value);

        /// <inheritdoc cref="Elasticity.FromDecapascals(double)"/>
        public static Elasticity Decapascals(this long value) => Elasticity.FromDecapascals(value);

        /// <inheritdoc cref="Elasticity.FromDecapascals(double?)"/>
        public static Elasticity? Decapascals(this long? value) => Elasticity.FromDecapascals(value);

        /// <inheritdoc cref="Elasticity.FromDecapascals(double)"/>
        public static Elasticity Decapascals(this double value) => Elasticity.FromDecapascals(value);

        /// <inheritdoc cref="Elasticity.FromDecapascals(double?)"/>
        public static Elasticity? Decapascals(this double? value) => Elasticity.FromDecapascals(value);

        /// <inheritdoc cref="Elasticity.FromDecapascals(double)"/>
        public static Elasticity Decapascals(this float value) => Elasticity.FromDecapascals(value);

        /// <inheritdoc cref="Elasticity.FromDecapascals(double?)"/>
        public static Elasticity? Decapascals(this float? value) => Elasticity.FromDecapascals(value);

        /// <inheritdoc cref="Elasticity.FromDecapascals(double)"/>
        public static Elasticity Decapascals(this decimal value) => Elasticity.FromDecapascals(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromDecapascals(double?)"/>
        public static Elasticity? Decapascals(this decimal? value) => Elasticity.FromDecapascals(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Decibar

        /// <inheritdoc cref="Elasticity.FromDecibars(double)"/>
        public static Elasticity Decibars(this int value) => Elasticity.FromDecibars(value);

        /// <inheritdoc cref="Elasticity.FromDecibars(double?)"/>
        public static Elasticity? Decibars(this int? value) => Elasticity.FromDecibars(value);

        /// <inheritdoc cref="Elasticity.FromDecibars(double)"/>
        public static Elasticity Decibars(this long value) => Elasticity.FromDecibars(value);

        /// <inheritdoc cref="Elasticity.FromDecibars(double?)"/>
        public static Elasticity? Decibars(this long? value) => Elasticity.FromDecibars(value);

        /// <inheritdoc cref="Elasticity.FromDecibars(double)"/>
        public static Elasticity Decibars(this double value) => Elasticity.FromDecibars(value);

        /// <inheritdoc cref="Elasticity.FromDecibars(double?)"/>
        public static Elasticity? Decibars(this double? value) => Elasticity.FromDecibars(value);

        /// <inheritdoc cref="Elasticity.FromDecibars(double)"/>
        public static Elasticity Decibars(this float value) => Elasticity.FromDecibars(value);

        /// <inheritdoc cref="Elasticity.FromDecibars(double?)"/>
        public static Elasticity? Decibars(this float? value) => Elasticity.FromDecibars(value);

        /// <inheritdoc cref="Elasticity.FromDecibars(double)"/>
        public static Elasticity Decibars(this decimal value) => Elasticity.FromDecibars(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromDecibars(double?)"/>
        public static Elasticity? Decibars(this decimal? value) => Elasticity.FromDecibars(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Gigapascal

        /// <inheritdoc cref="Elasticity.FromGigapascals(double)"/>
        public static Elasticity Gigapascals(this int value) => Elasticity.FromGigapascals(value);

        /// <inheritdoc cref="Elasticity.FromGigapascals(double?)"/>
        public static Elasticity? Gigapascals(this int? value) => Elasticity.FromGigapascals(value);

        /// <inheritdoc cref="Elasticity.FromGigapascals(double)"/>
        public static Elasticity Gigapascals(this long value) => Elasticity.FromGigapascals(value);

        /// <inheritdoc cref="Elasticity.FromGigapascals(double?)"/>
        public static Elasticity? Gigapascals(this long? value) => Elasticity.FromGigapascals(value);

        /// <inheritdoc cref="Elasticity.FromGigapascals(double)"/>
        public static Elasticity Gigapascals(this double value) => Elasticity.FromGigapascals(value);

        /// <inheritdoc cref="Elasticity.FromGigapascals(double?)"/>
        public static Elasticity? Gigapascals(this double? value) => Elasticity.FromGigapascals(value);

        /// <inheritdoc cref="Elasticity.FromGigapascals(double)"/>
        public static Elasticity Gigapascals(this float value) => Elasticity.FromGigapascals(value);

        /// <inheritdoc cref="Elasticity.FromGigapascals(double?)"/>
        public static Elasticity? Gigapascals(this float? value) => Elasticity.FromGigapascals(value);

        /// <inheritdoc cref="Elasticity.FromGigapascals(double)"/>
        public static Elasticity Gigapascals(this decimal value) => Elasticity.FromGigapascals(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromGigapascals(double?)"/>
        public static Elasticity? Gigapascals(this decimal? value) => Elasticity.FromGigapascals(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Hectopascal

        /// <inheritdoc cref="Elasticity.FromHectopascals(double)"/>
        public static Elasticity Hectopascals(this int value) => Elasticity.FromHectopascals(value);

        /// <inheritdoc cref="Elasticity.FromHectopascals(double?)"/>
        public static Elasticity? Hectopascals(this int? value) => Elasticity.FromHectopascals(value);

        /// <inheritdoc cref="Elasticity.FromHectopascals(double)"/>
        public static Elasticity Hectopascals(this long value) => Elasticity.FromHectopascals(value);

        /// <inheritdoc cref="Elasticity.FromHectopascals(double?)"/>
        public static Elasticity? Hectopascals(this long? value) => Elasticity.FromHectopascals(value);

        /// <inheritdoc cref="Elasticity.FromHectopascals(double)"/>
        public static Elasticity Hectopascals(this double value) => Elasticity.FromHectopascals(value);

        /// <inheritdoc cref="Elasticity.FromHectopascals(double?)"/>
        public static Elasticity? Hectopascals(this double? value) => Elasticity.FromHectopascals(value);

        /// <inheritdoc cref="Elasticity.FromHectopascals(double)"/>
        public static Elasticity Hectopascals(this float value) => Elasticity.FromHectopascals(value);

        /// <inheritdoc cref="Elasticity.FromHectopascals(double?)"/>
        public static Elasticity? Hectopascals(this float? value) => Elasticity.FromHectopascals(value);

        /// <inheritdoc cref="Elasticity.FromHectopascals(double)"/>
        public static Elasticity Hectopascals(this decimal value) => Elasticity.FromHectopascals(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromHectopascals(double?)"/>
        public static Elasticity? Hectopascals(this decimal? value) => Elasticity.FromHectopascals(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Kilobar

        /// <inheritdoc cref="Elasticity.FromKilobars(double)"/>
        public static Elasticity Kilobars(this int value) => Elasticity.FromKilobars(value);

        /// <inheritdoc cref="Elasticity.FromKilobars(double?)"/>
        public static Elasticity? Kilobars(this int? value) => Elasticity.FromKilobars(value);

        /// <inheritdoc cref="Elasticity.FromKilobars(double)"/>
        public static Elasticity Kilobars(this long value) => Elasticity.FromKilobars(value);

        /// <inheritdoc cref="Elasticity.FromKilobars(double?)"/>
        public static Elasticity? Kilobars(this long? value) => Elasticity.FromKilobars(value);

        /// <inheritdoc cref="Elasticity.FromKilobars(double)"/>
        public static Elasticity Kilobars(this double value) => Elasticity.FromKilobars(value);

        /// <inheritdoc cref="Elasticity.FromKilobars(double?)"/>
        public static Elasticity? Kilobars(this double? value) => Elasticity.FromKilobars(value);

        /// <inheritdoc cref="Elasticity.FromKilobars(double)"/>
        public static Elasticity Kilobars(this float value) => Elasticity.FromKilobars(value);

        /// <inheritdoc cref="Elasticity.FromKilobars(double?)"/>
        public static Elasticity? Kilobars(this float? value) => Elasticity.FromKilobars(value);

        /// <inheritdoc cref="Elasticity.FromKilobars(double)"/>
        public static Elasticity Kilobars(this decimal value) => Elasticity.FromKilobars(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromKilobars(double?)"/>
        public static Elasticity? Kilobars(this decimal? value) => Elasticity.FromKilobars(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilogramForcePerSquareCentimeter

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareCentimeter(double)"/>
        public static Elasticity KilogramsForcePerSquareCentimeter(this int value) => Elasticity.FromKilogramsForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareCentimeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareCentimeter(this int? value) => Elasticity.FromKilogramsForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareCentimeter(double)"/>
        public static Elasticity KilogramsForcePerSquareCentimeter(this long value) => Elasticity.FromKilogramsForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareCentimeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareCentimeter(this long? value) => Elasticity.FromKilogramsForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareCentimeter(double)"/>
        public static Elasticity KilogramsForcePerSquareCentimeter(this double value) => Elasticity.FromKilogramsForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareCentimeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareCentimeter(this double? value) => Elasticity.FromKilogramsForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareCentimeter(double)"/>
        public static Elasticity KilogramsForcePerSquareCentimeter(this float value) => Elasticity.FromKilogramsForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareCentimeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareCentimeter(this float? value) => Elasticity.FromKilogramsForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareCentimeter(double)"/>
        public static Elasticity KilogramsForcePerSquareCentimeter(this decimal value) => Elasticity.FromKilogramsForcePerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareCentimeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareCentimeter(this decimal? value) => Elasticity.FromKilogramsForcePerSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilogramForcePerSquareMeter

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMeter(double)"/>
        public static Elasticity KilogramsForcePerSquareMeter(this int value) => Elasticity.FromKilogramsForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareMeter(this int? value) => Elasticity.FromKilogramsForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMeter(double)"/>
        public static Elasticity KilogramsForcePerSquareMeter(this long value) => Elasticity.FromKilogramsForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareMeter(this long? value) => Elasticity.FromKilogramsForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMeter(double)"/>
        public static Elasticity KilogramsForcePerSquareMeter(this double value) => Elasticity.FromKilogramsForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareMeter(this double? value) => Elasticity.FromKilogramsForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMeter(double)"/>
        public static Elasticity KilogramsForcePerSquareMeter(this float value) => Elasticity.FromKilogramsForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareMeter(this float? value) => Elasticity.FromKilogramsForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMeter(double)"/>
        public static Elasticity KilogramsForcePerSquareMeter(this decimal value) => Elasticity.FromKilogramsForcePerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareMeter(this decimal? value) => Elasticity.FromKilogramsForcePerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilogramForcePerSquareMillimeter

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMillimeter(double)"/>
        public static Elasticity KilogramsForcePerSquareMillimeter(this int value) => Elasticity.FromKilogramsForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMillimeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareMillimeter(this int? value) => Elasticity.FromKilogramsForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMillimeter(double)"/>
        public static Elasticity KilogramsForcePerSquareMillimeter(this long value) => Elasticity.FromKilogramsForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMillimeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareMillimeter(this long? value) => Elasticity.FromKilogramsForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMillimeter(double)"/>
        public static Elasticity KilogramsForcePerSquareMillimeter(this double value) => Elasticity.FromKilogramsForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMillimeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareMillimeter(this double? value) => Elasticity.FromKilogramsForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMillimeter(double)"/>
        public static Elasticity KilogramsForcePerSquareMillimeter(this float value) => Elasticity.FromKilogramsForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMillimeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareMillimeter(this float? value) => Elasticity.FromKilogramsForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMillimeter(double)"/>
        public static Elasticity KilogramsForcePerSquareMillimeter(this decimal value) => Elasticity.FromKilogramsForcePerSquareMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromKilogramsForcePerSquareMillimeter(double?)"/>
        public static Elasticity? KilogramsForcePerSquareMillimeter(this decimal? value) => Elasticity.FromKilogramsForcePerSquareMillimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilonewtonPerSquareCentimeter

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareCentimeter(double)"/>
        public static Elasticity KilonewtonsPerSquareCentimeter(this int value) => Elasticity.FromKilonewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareCentimeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareCentimeter(this int? value) => Elasticity.FromKilonewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareCentimeter(double)"/>
        public static Elasticity KilonewtonsPerSquareCentimeter(this long value) => Elasticity.FromKilonewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareCentimeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareCentimeter(this long? value) => Elasticity.FromKilonewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareCentimeter(double)"/>
        public static Elasticity KilonewtonsPerSquareCentimeter(this double value) => Elasticity.FromKilonewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareCentimeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareCentimeter(this double? value) => Elasticity.FromKilonewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareCentimeter(double)"/>
        public static Elasticity KilonewtonsPerSquareCentimeter(this float value) => Elasticity.FromKilonewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareCentimeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareCentimeter(this float? value) => Elasticity.FromKilonewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareCentimeter(double)"/>
        public static Elasticity KilonewtonsPerSquareCentimeter(this decimal value) => Elasticity.FromKilonewtonsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareCentimeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareCentimeter(this decimal? value) => Elasticity.FromKilonewtonsPerSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilonewtonPerSquareMeter

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMeter(double)"/>
        public static Elasticity KilonewtonsPerSquareMeter(this int value) => Elasticity.FromKilonewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareMeter(this int? value) => Elasticity.FromKilonewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMeter(double)"/>
        public static Elasticity KilonewtonsPerSquareMeter(this long value) => Elasticity.FromKilonewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareMeter(this long? value) => Elasticity.FromKilonewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMeter(double)"/>
        public static Elasticity KilonewtonsPerSquareMeter(this double value) => Elasticity.FromKilonewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareMeter(this double? value) => Elasticity.FromKilonewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMeter(double)"/>
        public static Elasticity KilonewtonsPerSquareMeter(this float value) => Elasticity.FromKilonewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareMeter(this float? value) => Elasticity.FromKilonewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMeter(double)"/>
        public static Elasticity KilonewtonsPerSquareMeter(this decimal value) => Elasticity.FromKilonewtonsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareMeter(this decimal? value) => Elasticity.FromKilonewtonsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilonewtonPerSquareMillimeter

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMillimeter(double)"/>
        public static Elasticity KilonewtonsPerSquareMillimeter(this int value) => Elasticity.FromKilonewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMillimeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareMillimeter(this int? value) => Elasticity.FromKilonewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMillimeter(double)"/>
        public static Elasticity KilonewtonsPerSquareMillimeter(this long value) => Elasticity.FromKilonewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMillimeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareMillimeter(this long? value) => Elasticity.FromKilonewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMillimeter(double)"/>
        public static Elasticity KilonewtonsPerSquareMillimeter(this double value) => Elasticity.FromKilonewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMillimeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareMillimeter(this double? value) => Elasticity.FromKilonewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMillimeter(double)"/>
        public static Elasticity KilonewtonsPerSquareMillimeter(this float value) => Elasticity.FromKilonewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMillimeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareMillimeter(this float? value) => Elasticity.FromKilonewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMillimeter(double)"/>
        public static Elasticity KilonewtonsPerSquareMillimeter(this decimal value) => Elasticity.FromKilonewtonsPerSquareMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromKilonewtonsPerSquareMillimeter(double?)"/>
        public static Elasticity? KilonewtonsPerSquareMillimeter(this decimal? value) => Elasticity.FromKilonewtonsPerSquareMillimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Kilopascal

        /// <inheritdoc cref="Elasticity.FromKilopascals(double)"/>
        public static Elasticity Kilopascals(this int value) => Elasticity.FromKilopascals(value);

        /// <inheritdoc cref="Elasticity.FromKilopascals(double?)"/>
        public static Elasticity? Kilopascals(this int? value) => Elasticity.FromKilopascals(value);

        /// <inheritdoc cref="Elasticity.FromKilopascals(double)"/>
        public static Elasticity Kilopascals(this long value) => Elasticity.FromKilopascals(value);

        /// <inheritdoc cref="Elasticity.FromKilopascals(double?)"/>
        public static Elasticity? Kilopascals(this long? value) => Elasticity.FromKilopascals(value);

        /// <inheritdoc cref="Elasticity.FromKilopascals(double)"/>
        public static Elasticity Kilopascals(this double value) => Elasticity.FromKilopascals(value);

        /// <inheritdoc cref="Elasticity.FromKilopascals(double?)"/>
        public static Elasticity? Kilopascals(this double? value) => Elasticity.FromKilopascals(value);

        /// <inheritdoc cref="Elasticity.FromKilopascals(double)"/>
        public static Elasticity Kilopascals(this float value) => Elasticity.FromKilopascals(value);

        /// <inheritdoc cref="Elasticity.FromKilopascals(double?)"/>
        public static Elasticity? Kilopascals(this float? value) => Elasticity.FromKilopascals(value);

        /// <inheritdoc cref="Elasticity.FromKilopascals(double)"/>
        public static Elasticity Kilopascals(this decimal value) => Elasticity.FromKilopascals(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromKilopascals(double?)"/>
        public static Elasticity? Kilopascals(this decimal? value) => Elasticity.FromKilopascals(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilopoundForcePerSquareFoot

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareFoot(double)"/>
        public static Elasticity KilopoundsForcePerSquareFoot(this int value) => Elasticity.FromKilopoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareFoot(double?)"/>
        public static Elasticity? KilopoundsForcePerSquareFoot(this int? value) => Elasticity.FromKilopoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareFoot(double)"/>
        public static Elasticity KilopoundsForcePerSquareFoot(this long value) => Elasticity.FromKilopoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareFoot(double?)"/>
        public static Elasticity? KilopoundsForcePerSquareFoot(this long? value) => Elasticity.FromKilopoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareFoot(double)"/>
        public static Elasticity KilopoundsForcePerSquareFoot(this double value) => Elasticity.FromKilopoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareFoot(double?)"/>
        public static Elasticity? KilopoundsForcePerSquareFoot(this double? value) => Elasticity.FromKilopoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareFoot(double)"/>
        public static Elasticity KilopoundsForcePerSquareFoot(this float value) => Elasticity.FromKilopoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareFoot(double?)"/>
        public static Elasticity? KilopoundsForcePerSquareFoot(this float? value) => Elasticity.FromKilopoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareFoot(double)"/>
        public static Elasticity KilopoundsForcePerSquareFoot(this decimal value) => Elasticity.FromKilopoundsForcePerSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareFoot(double?)"/>
        public static Elasticity? KilopoundsForcePerSquareFoot(this decimal? value) => Elasticity.FromKilopoundsForcePerSquareFoot(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region KilopoundForcePerSquareInch

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareInch(double)"/>
        public static Elasticity KilopoundsForcePerSquareInch(this int value) => Elasticity.FromKilopoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareInch(double?)"/>
        public static Elasticity? KilopoundsForcePerSquareInch(this int? value) => Elasticity.FromKilopoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareInch(double)"/>
        public static Elasticity KilopoundsForcePerSquareInch(this long value) => Elasticity.FromKilopoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareInch(double?)"/>
        public static Elasticity? KilopoundsForcePerSquareInch(this long? value) => Elasticity.FromKilopoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareInch(double)"/>
        public static Elasticity KilopoundsForcePerSquareInch(this double value) => Elasticity.FromKilopoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareInch(double?)"/>
        public static Elasticity? KilopoundsForcePerSquareInch(this double? value) => Elasticity.FromKilopoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareInch(double)"/>
        public static Elasticity KilopoundsForcePerSquareInch(this float value) => Elasticity.FromKilopoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareInch(double?)"/>
        public static Elasticity? KilopoundsForcePerSquareInch(this float? value) => Elasticity.FromKilopoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareInch(double)"/>
        public static Elasticity KilopoundsForcePerSquareInch(this decimal value) => Elasticity.FromKilopoundsForcePerSquareInch(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromKilopoundsForcePerSquareInch(double?)"/>
        public static Elasticity? KilopoundsForcePerSquareInch(this decimal? value) => Elasticity.FromKilopoundsForcePerSquareInch(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Megabar

        /// <inheritdoc cref="Elasticity.FromMegabars(double)"/>
        public static Elasticity Megabars(this int value) => Elasticity.FromMegabars(value);

        /// <inheritdoc cref="Elasticity.FromMegabars(double?)"/>
        public static Elasticity? Megabars(this int? value) => Elasticity.FromMegabars(value);

        /// <inheritdoc cref="Elasticity.FromMegabars(double)"/>
        public static Elasticity Megabars(this long value) => Elasticity.FromMegabars(value);

        /// <inheritdoc cref="Elasticity.FromMegabars(double?)"/>
        public static Elasticity? Megabars(this long? value) => Elasticity.FromMegabars(value);

        /// <inheritdoc cref="Elasticity.FromMegabars(double)"/>
        public static Elasticity Megabars(this double value) => Elasticity.FromMegabars(value);

        /// <inheritdoc cref="Elasticity.FromMegabars(double?)"/>
        public static Elasticity? Megabars(this double? value) => Elasticity.FromMegabars(value);

        /// <inheritdoc cref="Elasticity.FromMegabars(double)"/>
        public static Elasticity Megabars(this float value) => Elasticity.FromMegabars(value);

        /// <inheritdoc cref="Elasticity.FromMegabars(double?)"/>
        public static Elasticity? Megabars(this float? value) => Elasticity.FromMegabars(value);

        /// <inheritdoc cref="Elasticity.FromMegabars(double)"/>
        public static Elasticity Megabars(this decimal value) => Elasticity.FromMegabars(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromMegabars(double?)"/>
        public static Elasticity? Megabars(this decimal? value) => Elasticity.FromMegabars(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Megapascal

        /// <inheritdoc cref="Elasticity.FromMegapascals(double)"/>
        public static Elasticity Megapascals(this int value) => Elasticity.FromMegapascals(value);

        /// <inheritdoc cref="Elasticity.FromMegapascals(double?)"/>
        public static Elasticity? Megapascals(this int? value) => Elasticity.FromMegapascals(value);

        /// <inheritdoc cref="Elasticity.FromMegapascals(double)"/>
        public static Elasticity Megapascals(this long value) => Elasticity.FromMegapascals(value);

        /// <inheritdoc cref="Elasticity.FromMegapascals(double?)"/>
        public static Elasticity? Megapascals(this long? value) => Elasticity.FromMegapascals(value);

        /// <inheritdoc cref="Elasticity.FromMegapascals(double)"/>
        public static Elasticity Megapascals(this double value) => Elasticity.FromMegapascals(value);

        /// <inheritdoc cref="Elasticity.FromMegapascals(double?)"/>
        public static Elasticity? Megapascals(this double? value) => Elasticity.FromMegapascals(value);

        /// <inheritdoc cref="Elasticity.FromMegapascals(double)"/>
        public static Elasticity Megapascals(this float value) => Elasticity.FromMegapascals(value);

        /// <inheritdoc cref="Elasticity.FromMegapascals(double?)"/>
        public static Elasticity? Megapascals(this float? value) => Elasticity.FromMegapascals(value);

        /// <inheritdoc cref="Elasticity.FromMegapascals(double)"/>
        public static Elasticity Megapascals(this decimal value) => Elasticity.FromMegapascals(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromMegapascals(double?)"/>
        public static Elasticity? Megapascals(this decimal? value) => Elasticity.FromMegapascals(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Micropascal

        /// <inheritdoc cref="Elasticity.FromMicropascals(double)"/>
        public static Elasticity Micropascals(this int value) => Elasticity.FromMicropascals(value);

        /// <inheritdoc cref="Elasticity.FromMicropascals(double?)"/>
        public static Elasticity? Micropascals(this int? value) => Elasticity.FromMicropascals(value);

        /// <inheritdoc cref="Elasticity.FromMicropascals(double)"/>
        public static Elasticity Micropascals(this long value) => Elasticity.FromMicropascals(value);

        /// <inheritdoc cref="Elasticity.FromMicropascals(double?)"/>
        public static Elasticity? Micropascals(this long? value) => Elasticity.FromMicropascals(value);

        /// <inheritdoc cref="Elasticity.FromMicropascals(double)"/>
        public static Elasticity Micropascals(this double value) => Elasticity.FromMicropascals(value);

        /// <inheritdoc cref="Elasticity.FromMicropascals(double?)"/>
        public static Elasticity? Micropascals(this double? value) => Elasticity.FromMicropascals(value);

        /// <inheritdoc cref="Elasticity.FromMicropascals(double)"/>
        public static Elasticity Micropascals(this float value) => Elasticity.FromMicropascals(value);

        /// <inheritdoc cref="Elasticity.FromMicropascals(double?)"/>
        public static Elasticity? Micropascals(this float? value) => Elasticity.FromMicropascals(value);

        /// <inheritdoc cref="Elasticity.FromMicropascals(double)"/>
        public static Elasticity Micropascals(this decimal value) => Elasticity.FromMicropascals(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromMicropascals(double?)"/>
        public static Elasticity? Micropascals(this decimal? value) => Elasticity.FromMicropascals(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Millibar

        /// <inheritdoc cref="Elasticity.FromMillibars(double)"/>
        public static Elasticity Millibars(this int value) => Elasticity.FromMillibars(value);

        /// <inheritdoc cref="Elasticity.FromMillibars(double?)"/>
        public static Elasticity? Millibars(this int? value) => Elasticity.FromMillibars(value);

        /// <inheritdoc cref="Elasticity.FromMillibars(double)"/>
        public static Elasticity Millibars(this long value) => Elasticity.FromMillibars(value);

        /// <inheritdoc cref="Elasticity.FromMillibars(double?)"/>
        public static Elasticity? Millibars(this long? value) => Elasticity.FromMillibars(value);

        /// <inheritdoc cref="Elasticity.FromMillibars(double)"/>
        public static Elasticity Millibars(this double value) => Elasticity.FromMillibars(value);

        /// <inheritdoc cref="Elasticity.FromMillibars(double?)"/>
        public static Elasticity? Millibars(this double? value) => Elasticity.FromMillibars(value);

        /// <inheritdoc cref="Elasticity.FromMillibars(double)"/>
        public static Elasticity Millibars(this float value) => Elasticity.FromMillibars(value);

        /// <inheritdoc cref="Elasticity.FromMillibars(double?)"/>
        public static Elasticity? Millibars(this float? value) => Elasticity.FromMillibars(value);

        /// <inheritdoc cref="Elasticity.FromMillibars(double)"/>
        public static Elasticity Millibars(this decimal value) => Elasticity.FromMillibars(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromMillibars(double?)"/>
        public static Elasticity? Millibars(this decimal? value) => Elasticity.FromMillibars(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NewtonPerSquareCentimeter

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareCentimeter(double)"/>
        public static Elasticity NewtonsPerSquareCentimeter(this int value) => Elasticity.FromNewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareCentimeter(double?)"/>
        public static Elasticity? NewtonsPerSquareCentimeter(this int? value) => Elasticity.FromNewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareCentimeter(double)"/>
        public static Elasticity NewtonsPerSquareCentimeter(this long value) => Elasticity.FromNewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareCentimeter(double?)"/>
        public static Elasticity? NewtonsPerSquareCentimeter(this long? value) => Elasticity.FromNewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareCentimeter(double)"/>
        public static Elasticity NewtonsPerSquareCentimeter(this double value) => Elasticity.FromNewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareCentimeter(double?)"/>
        public static Elasticity? NewtonsPerSquareCentimeter(this double? value) => Elasticity.FromNewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareCentimeter(double)"/>
        public static Elasticity NewtonsPerSquareCentimeter(this float value) => Elasticity.FromNewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareCentimeter(double?)"/>
        public static Elasticity? NewtonsPerSquareCentimeter(this float? value) => Elasticity.FromNewtonsPerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareCentimeter(double)"/>
        public static Elasticity NewtonsPerSquareCentimeter(this decimal value) => Elasticity.FromNewtonsPerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareCentimeter(double?)"/>
        public static Elasticity? NewtonsPerSquareCentimeter(this decimal? value) => Elasticity.FromNewtonsPerSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NewtonPerSquareMeter

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMeter(double)"/>
        public static Elasticity NewtonsPerSquareMeter(this int value) => Elasticity.FromNewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMeter(double?)"/>
        public static Elasticity? NewtonsPerSquareMeter(this int? value) => Elasticity.FromNewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMeter(double)"/>
        public static Elasticity NewtonsPerSquareMeter(this long value) => Elasticity.FromNewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMeter(double?)"/>
        public static Elasticity? NewtonsPerSquareMeter(this long? value) => Elasticity.FromNewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMeter(double)"/>
        public static Elasticity NewtonsPerSquareMeter(this double value) => Elasticity.FromNewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMeter(double?)"/>
        public static Elasticity? NewtonsPerSquareMeter(this double? value) => Elasticity.FromNewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMeter(double)"/>
        public static Elasticity NewtonsPerSquareMeter(this float value) => Elasticity.FromNewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMeter(double?)"/>
        public static Elasticity? NewtonsPerSquareMeter(this float? value) => Elasticity.FromNewtonsPerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMeter(double)"/>
        public static Elasticity NewtonsPerSquareMeter(this decimal value) => Elasticity.FromNewtonsPerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMeter(double?)"/>
        public static Elasticity? NewtonsPerSquareMeter(this decimal? value) => Elasticity.FromNewtonsPerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region NewtonPerSquareMillimeter

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMillimeter(double)"/>
        public static Elasticity NewtonsPerSquareMillimeter(this int value) => Elasticity.FromNewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMillimeter(double?)"/>
        public static Elasticity? NewtonsPerSquareMillimeter(this int? value) => Elasticity.FromNewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMillimeter(double)"/>
        public static Elasticity NewtonsPerSquareMillimeter(this long value) => Elasticity.FromNewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMillimeter(double?)"/>
        public static Elasticity? NewtonsPerSquareMillimeter(this long? value) => Elasticity.FromNewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMillimeter(double)"/>
        public static Elasticity NewtonsPerSquareMillimeter(this double value) => Elasticity.FromNewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMillimeter(double?)"/>
        public static Elasticity? NewtonsPerSquareMillimeter(this double? value) => Elasticity.FromNewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMillimeter(double)"/>
        public static Elasticity NewtonsPerSquareMillimeter(this float value) => Elasticity.FromNewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMillimeter(double?)"/>
        public static Elasticity? NewtonsPerSquareMillimeter(this float? value) => Elasticity.FromNewtonsPerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMillimeter(double)"/>
        public static Elasticity NewtonsPerSquareMillimeter(this decimal value) => Elasticity.FromNewtonsPerSquareMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromNewtonsPerSquareMillimeter(double?)"/>
        public static Elasticity? NewtonsPerSquareMillimeter(this decimal? value) => Elasticity.FromNewtonsPerSquareMillimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Pascal

        /// <inheritdoc cref="Elasticity.FromPascals(double)"/>
        public static Elasticity Pascals(this int value) => Elasticity.FromPascals(value);

        /// <inheritdoc cref="Elasticity.FromPascals(double?)"/>
        public static Elasticity? Pascals(this int? value) => Elasticity.FromPascals(value);

        /// <inheritdoc cref="Elasticity.FromPascals(double)"/>
        public static Elasticity Pascals(this long value) => Elasticity.FromPascals(value);

        /// <inheritdoc cref="Elasticity.FromPascals(double?)"/>
        public static Elasticity? Pascals(this long? value) => Elasticity.FromPascals(value);

        /// <inheritdoc cref="Elasticity.FromPascals(double)"/>
        public static Elasticity Pascals(this double value) => Elasticity.FromPascals(value);

        /// <inheritdoc cref="Elasticity.FromPascals(double?)"/>
        public static Elasticity? Pascals(this double? value) => Elasticity.FromPascals(value);

        /// <inheritdoc cref="Elasticity.FromPascals(double)"/>
        public static Elasticity Pascals(this float value) => Elasticity.FromPascals(value);

        /// <inheritdoc cref="Elasticity.FromPascals(double?)"/>
        public static Elasticity? Pascals(this float? value) => Elasticity.FromPascals(value);

        /// <inheritdoc cref="Elasticity.FromPascals(double)"/>
        public static Elasticity Pascals(this decimal value) => Elasticity.FromPascals(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromPascals(double?)"/>
        public static Elasticity? Pascals(this decimal? value) => Elasticity.FromPascals(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PoundForcePerSquareFoot

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareFoot(double)"/>
        public static Elasticity PoundsForcePerSquareFoot(this int value) => Elasticity.FromPoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareFoot(double?)"/>
        public static Elasticity? PoundsForcePerSquareFoot(this int? value) => Elasticity.FromPoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareFoot(double)"/>
        public static Elasticity PoundsForcePerSquareFoot(this long value) => Elasticity.FromPoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareFoot(double?)"/>
        public static Elasticity? PoundsForcePerSquareFoot(this long? value) => Elasticity.FromPoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareFoot(double)"/>
        public static Elasticity PoundsForcePerSquareFoot(this double value) => Elasticity.FromPoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareFoot(double?)"/>
        public static Elasticity? PoundsForcePerSquareFoot(this double? value) => Elasticity.FromPoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareFoot(double)"/>
        public static Elasticity PoundsForcePerSquareFoot(this float value) => Elasticity.FromPoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareFoot(double?)"/>
        public static Elasticity? PoundsForcePerSquareFoot(this float? value) => Elasticity.FromPoundsForcePerSquareFoot(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareFoot(double)"/>
        public static Elasticity PoundsForcePerSquareFoot(this decimal value) => Elasticity.FromPoundsForcePerSquareFoot(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareFoot(double?)"/>
        public static Elasticity? PoundsForcePerSquareFoot(this decimal? value) => Elasticity.FromPoundsForcePerSquareFoot(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PoundForcePerSquareInch

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareInch(double)"/>
        public static Elasticity PoundsForcePerSquareInch(this int value) => Elasticity.FromPoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareInch(double?)"/>
        public static Elasticity? PoundsForcePerSquareInch(this int? value) => Elasticity.FromPoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareInch(double)"/>
        public static Elasticity PoundsForcePerSquareInch(this long value) => Elasticity.FromPoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareInch(double?)"/>
        public static Elasticity? PoundsForcePerSquareInch(this long? value) => Elasticity.FromPoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareInch(double)"/>
        public static Elasticity PoundsForcePerSquareInch(this double value) => Elasticity.FromPoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareInch(double?)"/>
        public static Elasticity? PoundsForcePerSquareInch(this double? value) => Elasticity.FromPoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareInch(double)"/>
        public static Elasticity PoundsForcePerSquareInch(this float value) => Elasticity.FromPoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareInch(double?)"/>
        public static Elasticity? PoundsForcePerSquareInch(this float? value) => Elasticity.FromPoundsForcePerSquareInch(value);

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareInch(double)"/>
        public static Elasticity PoundsForcePerSquareInch(this decimal value) => Elasticity.FromPoundsForcePerSquareInch(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromPoundsForcePerSquareInch(double?)"/>
        public static Elasticity? PoundsForcePerSquareInch(this decimal? value) => Elasticity.FromPoundsForcePerSquareInch(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Psi

        /// <inheritdoc cref="Elasticity.FromPsi(double)"/>
        public static Elasticity Psi(this int value) => Elasticity.FromPsi(value);

        /// <inheritdoc cref="Elasticity.FromPsi(double?)"/>
        public static Elasticity? Psi(this int? value) => Elasticity.FromPsi(value);

        /// <inheritdoc cref="Elasticity.FromPsi(double)"/>
        public static Elasticity Psi(this long value) => Elasticity.FromPsi(value);

        /// <inheritdoc cref="Elasticity.FromPsi(double?)"/>
        public static Elasticity? Psi(this long? value) => Elasticity.FromPsi(value);

        /// <inheritdoc cref="Elasticity.FromPsi(double)"/>
        public static Elasticity Psi(this double value) => Elasticity.FromPsi(value);

        /// <inheritdoc cref="Elasticity.FromPsi(double?)"/>
        public static Elasticity? Psi(this double? value) => Elasticity.FromPsi(value);

        /// <inheritdoc cref="Elasticity.FromPsi(double)"/>
        public static Elasticity Psi(this float value) => Elasticity.FromPsi(value);

        /// <inheritdoc cref="Elasticity.FromPsi(double?)"/>
        public static Elasticity? Psi(this float? value) => Elasticity.FromPsi(value);

        /// <inheritdoc cref="Elasticity.FromPsi(double)"/>
        public static Elasticity Psi(this decimal value) => Elasticity.FromPsi(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromPsi(double?)"/>
        public static Elasticity? Psi(this decimal? value) => Elasticity.FromPsi(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region TechnicalAtmosphere

        /// <inheritdoc cref="Elasticity.FromTechnicalAtmospheres(double)"/>
        public static Elasticity TechnicalAtmospheres(this int value) => Elasticity.FromTechnicalAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromTechnicalAtmospheres(double?)"/>
        public static Elasticity? TechnicalAtmospheres(this int? value) => Elasticity.FromTechnicalAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromTechnicalAtmospheres(double)"/>
        public static Elasticity TechnicalAtmospheres(this long value) => Elasticity.FromTechnicalAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromTechnicalAtmospheres(double?)"/>
        public static Elasticity? TechnicalAtmospheres(this long? value) => Elasticity.FromTechnicalAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromTechnicalAtmospheres(double)"/>
        public static Elasticity TechnicalAtmospheres(this double value) => Elasticity.FromTechnicalAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromTechnicalAtmospheres(double?)"/>
        public static Elasticity? TechnicalAtmospheres(this double? value) => Elasticity.FromTechnicalAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromTechnicalAtmospheres(double)"/>
        public static Elasticity TechnicalAtmospheres(this float value) => Elasticity.FromTechnicalAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromTechnicalAtmospheres(double?)"/>
        public static Elasticity? TechnicalAtmospheres(this float? value) => Elasticity.FromTechnicalAtmospheres(value);

        /// <inheritdoc cref="Elasticity.FromTechnicalAtmospheres(double)"/>
        public static Elasticity TechnicalAtmospheres(this decimal value) => Elasticity.FromTechnicalAtmospheres(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromTechnicalAtmospheres(double?)"/>
        public static Elasticity? TechnicalAtmospheres(this decimal? value) => Elasticity.FromTechnicalAtmospheres(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region TonneForcePerSquareCentimeter

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareCentimeter(double)"/>
        public static Elasticity TonnesForcePerSquareCentimeter(this int value) => Elasticity.FromTonnesForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareCentimeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareCentimeter(this int? value) => Elasticity.FromTonnesForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareCentimeter(double)"/>
        public static Elasticity TonnesForcePerSquareCentimeter(this long value) => Elasticity.FromTonnesForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareCentimeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareCentimeter(this long? value) => Elasticity.FromTonnesForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareCentimeter(double)"/>
        public static Elasticity TonnesForcePerSquareCentimeter(this double value) => Elasticity.FromTonnesForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareCentimeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareCentimeter(this double? value) => Elasticity.FromTonnesForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareCentimeter(double)"/>
        public static Elasticity TonnesForcePerSquareCentimeter(this float value) => Elasticity.FromTonnesForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareCentimeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareCentimeter(this float? value) => Elasticity.FromTonnesForcePerSquareCentimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareCentimeter(double)"/>
        public static Elasticity TonnesForcePerSquareCentimeter(this decimal value) => Elasticity.FromTonnesForcePerSquareCentimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareCentimeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareCentimeter(this decimal? value) => Elasticity.FromTonnesForcePerSquareCentimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region TonneForcePerSquareMeter

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMeter(double)"/>
        public static Elasticity TonnesForcePerSquareMeter(this int value) => Elasticity.FromTonnesForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareMeter(this int? value) => Elasticity.FromTonnesForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMeter(double)"/>
        public static Elasticity TonnesForcePerSquareMeter(this long value) => Elasticity.FromTonnesForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareMeter(this long? value) => Elasticity.FromTonnesForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMeter(double)"/>
        public static Elasticity TonnesForcePerSquareMeter(this double value) => Elasticity.FromTonnesForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareMeter(this double? value) => Elasticity.FromTonnesForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMeter(double)"/>
        public static Elasticity TonnesForcePerSquareMeter(this float value) => Elasticity.FromTonnesForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareMeter(this float? value) => Elasticity.FromTonnesForcePerSquareMeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMeter(double)"/>
        public static Elasticity TonnesForcePerSquareMeter(this decimal value) => Elasticity.FromTonnesForcePerSquareMeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareMeter(this decimal? value) => Elasticity.FromTonnesForcePerSquareMeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region TonneForcePerSquareMillimeter

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMillimeter(double)"/>
        public static Elasticity TonnesForcePerSquareMillimeter(this int value) => Elasticity.FromTonnesForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMillimeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareMillimeter(this int? value) => Elasticity.FromTonnesForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMillimeter(double)"/>
        public static Elasticity TonnesForcePerSquareMillimeter(this long value) => Elasticity.FromTonnesForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMillimeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareMillimeter(this long? value) => Elasticity.FromTonnesForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMillimeter(double)"/>
        public static Elasticity TonnesForcePerSquareMillimeter(this double value) => Elasticity.FromTonnesForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMillimeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareMillimeter(this double? value) => Elasticity.FromTonnesForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMillimeter(double)"/>
        public static Elasticity TonnesForcePerSquareMillimeter(this float value) => Elasticity.FromTonnesForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMillimeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareMillimeter(this float? value) => Elasticity.FromTonnesForcePerSquareMillimeter(value);

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMillimeter(double)"/>
        public static Elasticity TonnesForcePerSquareMillimeter(this decimal value) => Elasticity.FromTonnesForcePerSquareMillimeter(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromTonnesForcePerSquareMillimeter(double?)"/>
        public static Elasticity? TonnesForcePerSquareMillimeter(this decimal? value) => Elasticity.FromTonnesForcePerSquareMillimeter(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region Torr

        /// <inheritdoc cref="Elasticity.FromTorrs(double)"/>
        public static Elasticity Torrs(this int value) => Elasticity.FromTorrs(value);

        /// <inheritdoc cref="Elasticity.FromTorrs(double?)"/>
        public static Elasticity? Torrs(this int? value) => Elasticity.FromTorrs(value);

        /// <inheritdoc cref="Elasticity.FromTorrs(double)"/>
        public static Elasticity Torrs(this long value) => Elasticity.FromTorrs(value);

        /// <inheritdoc cref="Elasticity.FromTorrs(double?)"/>
        public static Elasticity? Torrs(this long? value) => Elasticity.FromTorrs(value);

        /// <inheritdoc cref="Elasticity.FromTorrs(double)"/>
        public static Elasticity Torrs(this double value) => Elasticity.FromTorrs(value);

        /// <inheritdoc cref="Elasticity.FromTorrs(double?)"/>
        public static Elasticity? Torrs(this double? value) => Elasticity.FromTorrs(value);

        /// <inheritdoc cref="Elasticity.FromTorrs(double)"/>
        public static Elasticity Torrs(this float value) => Elasticity.FromTorrs(value);

        /// <inheritdoc cref="Elasticity.FromTorrs(double?)"/>
        public static Elasticity? Torrs(this float? value) => Elasticity.FromTorrs(value);

        /// <inheritdoc cref="Elasticity.FromTorrs(double)"/>
        public static Elasticity Torrs(this decimal value) => Elasticity.FromTorrs(Convert.ToDouble(value));

        /// <inheritdoc cref="Elasticity.FromTorrs(double?)"/>
        public static Elasticity? Torrs(this decimal? value) => Elasticity.FromTorrs(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
