//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \GenerateUnits.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add Scripts\UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

#if !WINDOWS_UWP
// Extension methods/overloads not supported in Universal Windows Platform (WinRT Components)
namespace UnitsNet.Extensions.NumberToPerTemperature
{
    public static class NumberToPerTemperatureExtensions
    {
        #region DegreeRankine

        /// <inheritdoc cref="PerTemperature.FromDegreesRankine(double)"/>
        public static PerTemperature DegreesRankine(this int value) => PerTemperature.FromDegreesRankine(value);

        /// <inheritdoc cref="PerTemperature.FromDegreesRankine(double?)"/>
        public static PerTemperature? DegreesRankine(this int? value) => PerTemperature.FromDegreesRankine(value);

        /// <inheritdoc cref="PerTemperature.FromDegreesRankine(double)"/>
        public static PerTemperature DegreesRankine(this long value) => PerTemperature.FromDegreesRankine(value);

        /// <inheritdoc cref="PerTemperature.FromDegreesRankine(double?)"/>
        public static PerTemperature? DegreesRankine(this long? value) => PerTemperature.FromDegreesRankine(value);

        /// <inheritdoc cref="PerTemperature.FromDegreesRankine(double)"/>
        public static PerTemperature DegreesRankine(this double value) => PerTemperature.FromDegreesRankine(value);

        /// <inheritdoc cref="PerTemperature.FromDegreesRankine(double?)"/>
        public static PerTemperature? DegreesRankine(this double? value) => PerTemperature.FromDegreesRankine(value);

        /// <inheritdoc cref="PerTemperature.FromDegreesRankine(double)"/>
        public static PerTemperature DegreesRankine(this float value) => PerTemperature.FromDegreesRankine(value);

        /// <inheritdoc cref="PerTemperature.FromDegreesRankine(double?)"/>
        public static PerTemperature? DegreesRankine(this float? value) => PerTemperature.FromDegreesRankine(value);

        /// <inheritdoc cref="PerTemperature.FromDegreesRankine(double)"/>
        public static PerTemperature DegreesRankine(this decimal value) => PerTemperature.FromDegreesRankine(Convert.ToDouble(value));

        /// <inheritdoc cref="PerTemperature.FromDegreesRankine(double?)"/>
        public static PerTemperature? DegreesRankine(this decimal? value) => PerTemperature.FromDegreesRankine(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PerDegreeCelsius

        /// <inheritdoc cref="PerTemperature.FromPerDegreesCelsius(double)"/>
        public static PerTemperature PerDegreesCelsius(this int value) => PerTemperature.FromPerDegreesCelsius(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesCelsius(double?)"/>
        public static PerTemperature? PerDegreesCelsius(this int? value) => PerTemperature.FromPerDegreesCelsius(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesCelsius(double)"/>
        public static PerTemperature PerDegreesCelsius(this long value) => PerTemperature.FromPerDegreesCelsius(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesCelsius(double?)"/>
        public static PerTemperature? PerDegreesCelsius(this long? value) => PerTemperature.FromPerDegreesCelsius(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesCelsius(double)"/>
        public static PerTemperature PerDegreesCelsius(this double value) => PerTemperature.FromPerDegreesCelsius(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesCelsius(double?)"/>
        public static PerTemperature? PerDegreesCelsius(this double? value) => PerTemperature.FromPerDegreesCelsius(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesCelsius(double)"/>
        public static PerTemperature PerDegreesCelsius(this float value) => PerTemperature.FromPerDegreesCelsius(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesCelsius(double?)"/>
        public static PerTemperature? PerDegreesCelsius(this float? value) => PerTemperature.FromPerDegreesCelsius(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesCelsius(double)"/>
        public static PerTemperature PerDegreesCelsius(this decimal value) => PerTemperature.FromPerDegreesCelsius(Convert.ToDouble(value));

        /// <inheritdoc cref="PerTemperature.FromPerDegreesCelsius(double?)"/>
        public static PerTemperature? PerDegreesCelsius(this decimal? value) => PerTemperature.FromPerDegreesCelsius(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PerDegreeDelisle

        /// <inheritdoc cref="PerTemperature.FromPerDegreesDelisle(double)"/>
        public static PerTemperature PerDegreesDelisle(this int value) => PerTemperature.FromPerDegreesDelisle(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesDelisle(double?)"/>
        public static PerTemperature? PerDegreesDelisle(this int? value) => PerTemperature.FromPerDegreesDelisle(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesDelisle(double)"/>
        public static PerTemperature PerDegreesDelisle(this long value) => PerTemperature.FromPerDegreesDelisle(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesDelisle(double?)"/>
        public static PerTemperature? PerDegreesDelisle(this long? value) => PerTemperature.FromPerDegreesDelisle(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesDelisle(double)"/>
        public static PerTemperature PerDegreesDelisle(this double value) => PerTemperature.FromPerDegreesDelisle(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesDelisle(double?)"/>
        public static PerTemperature? PerDegreesDelisle(this double? value) => PerTemperature.FromPerDegreesDelisle(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesDelisle(double)"/>
        public static PerTemperature PerDegreesDelisle(this float value) => PerTemperature.FromPerDegreesDelisle(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesDelisle(double?)"/>
        public static PerTemperature? PerDegreesDelisle(this float? value) => PerTemperature.FromPerDegreesDelisle(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesDelisle(double)"/>
        public static PerTemperature PerDegreesDelisle(this decimal value) => PerTemperature.FromPerDegreesDelisle(Convert.ToDouble(value));

        /// <inheritdoc cref="PerTemperature.FromPerDegreesDelisle(double?)"/>
        public static PerTemperature? PerDegreesDelisle(this decimal? value) => PerTemperature.FromPerDegreesDelisle(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PerDegreeFahrenheit

        /// <inheritdoc cref="PerTemperature.FromPerDegreesFahrenheit(double)"/>
        public static PerTemperature PerDegreesFahrenheit(this int value) => PerTemperature.FromPerDegreesFahrenheit(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesFahrenheit(double?)"/>
        public static PerTemperature? PerDegreesFahrenheit(this int? value) => PerTemperature.FromPerDegreesFahrenheit(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesFahrenheit(double)"/>
        public static PerTemperature PerDegreesFahrenheit(this long value) => PerTemperature.FromPerDegreesFahrenheit(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesFahrenheit(double?)"/>
        public static PerTemperature? PerDegreesFahrenheit(this long? value) => PerTemperature.FromPerDegreesFahrenheit(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesFahrenheit(double)"/>
        public static PerTemperature PerDegreesFahrenheit(this double value) => PerTemperature.FromPerDegreesFahrenheit(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesFahrenheit(double?)"/>
        public static PerTemperature? PerDegreesFahrenheit(this double? value) => PerTemperature.FromPerDegreesFahrenheit(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesFahrenheit(double)"/>
        public static PerTemperature PerDegreesFahrenheit(this float value) => PerTemperature.FromPerDegreesFahrenheit(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesFahrenheit(double?)"/>
        public static PerTemperature? PerDegreesFahrenheit(this float? value) => PerTemperature.FromPerDegreesFahrenheit(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesFahrenheit(double)"/>
        public static PerTemperature PerDegreesFahrenheit(this decimal value) => PerTemperature.FromPerDegreesFahrenheit(Convert.ToDouble(value));

        /// <inheritdoc cref="PerTemperature.FromPerDegreesFahrenheit(double?)"/>
        public static PerTemperature? PerDegreesFahrenheit(this decimal? value) => PerTemperature.FromPerDegreesFahrenheit(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PerDegreeNewton

        /// <inheritdoc cref="PerTemperature.FromPerDegreesNewton(double)"/>
        public static PerTemperature PerDegreesNewton(this int value) => PerTemperature.FromPerDegreesNewton(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesNewton(double?)"/>
        public static PerTemperature? PerDegreesNewton(this int? value) => PerTemperature.FromPerDegreesNewton(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesNewton(double)"/>
        public static PerTemperature PerDegreesNewton(this long value) => PerTemperature.FromPerDegreesNewton(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesNewton(double?)"/>
        public static PerTemperature? PerDegreesNewton(this long? value) => PerTemperature.FromPerDegreesNewton(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesNewton(double)"/>
        public static PerTemperature PerDegreesNewton(this double value) => PerTemperature.FromPerDegreesNewton(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesNewton(double?)"/>
        public static PerTemperature? PerDegreesNewton(this double? value) => PerTemperature.FromPerDegreesNewton(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesNewton(double)"/>
        public static PerTemperature PerDegreesNewton(this float value) => PerTemperature.FromPerDegreesNewton(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesNewton(double?)"/>
        public static PerTemperature? PerDegreesNewton(this float? value) => PerTemperature.FromPerDegreesNewton(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesNewton(double)"/>
        public static PerTemperature PerDegreesNewton(this decimal value) => PerTemperature.FromPerDegreesNewton(Convert.ToDouble(value));

        /// <inheritdoc cref="PerTemperature.FromPerDegreesNewton(double?)"/>
        public static PerTemperature? PerDegreesNewton(this decimal? value) => PerTemperature.FromPerDegreesNewton(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PerDegreeReaumur

        /// <inheritdoc cref="PerTemperature.FromPerDegreesReaumur(double)"/>
        public static PerTemperature PerDegreesReaumur(this int value) => PerTemperature.FromPerDegreesReaumur(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesReaumur(double?)"/>
        public static PerTemperature? PerDegreesReaumur(this int? value) => PerTemperature.FromPerDegreesReaumur(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesReaumur(double)"/>
        public static PerTemperature PerDegreesReaumur(this long value) => PerTemperature.FromPerDegreesReaumur(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesReaumur(double?)"/>
        public static PerTemperature? PerDegreesReaumur(this long? value) => PerTemperature.FromPerDegreesReaumur(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesReaumur(double)"/>
        public static PerTemperature PerDegreesReaumur(this double value) => PerTemperature.FromPerDegreesReaumur(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesReaumur(double?)"/>
        public static PerTemperature? PerDegreesReaumur(this double? value) => PerTemperature.FromPerDegreesReaumur(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesReaumur(double)"/>
        public static PerTemperature PerDegreesReaumur(this float value) => PerTemperature.FromPerDegreesReaumur(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesReaumur(double?)"/>
        public static PerTemperature? PerDegreesReaumur(this float? value) => PerTemperature.FromPerDegreesReaumur(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesReaumur(double)"/>
        public static PerTemperature PerDegreesReaumur(this decimal value) => PerTemperature.FromPerDegreesReaumur(Convert.ToDouble(value));

        /// <inheritdoc cref="PerTemperature.FromPerDegreesReaumur(double?)"/>
        public static PerTemperature? PerDegreesReaumur(this decimal? value) => PerTemperature.FromPerDegreesReaumur(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PerDegreeRoemer

        /// <inheritdoc cref="PerTemperature.FromPerDegreesRoemer(double)"/>
        public static PerTemperature PerDegreesRoemer(this int value) => PerTemperature.FromPerDegreesRoemer(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesRoemer(double?)"/>
        public static PerTemperature? PerDegreesRoemer(this int? value) => PerTemperature.FromPerDegreesRoemer(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesRoemer(double)"/>
        public static PerTemperature PerDegreesRoemer(this long value) => PerTemperature.FromPerDegreesRoemer(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesRoemer(double?)"/>
        public static PerTemperature? PerDegreesRoemer(this long? value) => PerTemperature.FromPerDegreesRoemer(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesRoemer(double)"/>
        public static PerTemperature PerDegreesRoemer(this double value) => PerTemperature.FromPerDegreesRoemer(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesRoemer(double?)"/>
        public static PerTemperature? PerDegreesRoemer(this double? value) => PerTemperature.FromPerDegreesRoemer(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesRoemer(double)"/>
        public static PerTemperature PerDegreesRoemer(this float value) => PerTemperature.FromPerDegreesRoemer(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesRoemer(double?)"/>
        public static PerTemperature? PerDegreesRoemer(this float? value) => PerTemperature.FromPerDegreesRoemer(value);

        /// <inheritdoc cref="PerTemperature.FromPerDegreesRoemer(double)"/>
        public static PerTemperature PerDegreesRoemer(this decimal value) => PerTemperature.FromPerDegreesRoemer(Convert.ToDouble(value));

        /// <inheritdoc cref="PerTemperature.FromPerDegreesRoemer(double?)"/>
        public static PerTemperature? PerDegreesRoemer(this decimal? value) => PerTemperature.FromPerDegreesRoemer(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region PerKelvin

        /// <inheritdoc cref="PerTemperature.FromPerKelvins(double)"/>
        public static PerTemperature PerKelvins(this int value) => PerTemperature.FromPerKelvins(value);

        /// <inheritdoc cref="PerTemperature.FromPerKelvins(double?)"/>
        public static PerTemperature? PerKelvins(this int? value) => PerTemperature.FromPerKelvins(value);

        /// <inheritdoc cref="PerTemperature.FromPerKelvins(double)"/>
        public static PerTemperature PerKelvins(this long value) => PerTemperature.FromPerKelvins(value);

        /// <inheritdoc cref="PerTemperature.FromPerKelvins(double?)"/>
        public static PerTemperature? PerKelvins(this long? value) => PerTemperature.FromPerKelvins(value);

        /// <inheritdoc cref="PerTemperature.FromPerKelvins(double)"/>
        public static PerTemperature PerKelvins(this double value) => PerTemperature.FromPerKelvins(value);

        /// <inheritdoc cref="PerTemperature.FromPerKelvins(double?)"/>
        public static PerTemperature? PerKelvins(this double? value) => PerTemperature.FromPerKelvins(value);

        /// <inheritdoc cref="PerTemperature.FromPerKelvins(double)"/>
        public static PerTemperature PerKelvins(this float value) => PerTemperature.FromPerKelvins(value);

        /// <inheritdoc cref="PerTemperature.FromPerKelvins(double?)"/>
        public static PerTemperature? PerKelvins(this float? value) => PerTemperature.FromPerKelvins(value);

        /// <inheritdoc cref="PerTemperature.FromPerKelvins(double)"/>
        public static PerTemperature PerKelvins(this decimal value) => PerTemperature.FromPerKelvins(Convert.ToDouble(value));

        /// <inheritdoc cref="PerTemperature.FromPerKelvins(double?)"/>
        public static PerTemperature? PerKelvins(this decimal? value) => PerTemperature.FromPerKelvins(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
