//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \GenerateUnits.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add Scripts\UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

#if WINDOWS_UWP
using Culture = System.String;
#else
using Culture = System.IFormatProvider;
#endif

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Elasticity of a material.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart
#if WINDOWS_UWP
    public sealed partial class Elasticity
#else
    public partial struct Elasticity : IComparable, IComparable<Elasticity>
#endif
    {
        /// <summary>
        ///     Base unit of Elasticity.
        /// </summary>
        private readonly double _newtonsPerSquareMeter;

#if WINDOWS_UWP
        public Elasticity() : this(0)
        {
        }
#endif

        public Elasticity(double newtonspersquaremeter)
        {
            _newtonsPerSquareMeter = Convert.ToDouble(newtonspersquaremeter);
        }

        // Method overloads and with same number of parameters not supported in Universal Windows Platform (WinRT Components).
#if WINDOWS_UWP
        private
#else
        public
#endif
        Elasticity(long newtonspersquaremeter)
        {
            _newtonsPerSquareMeter = Convert.ToDouble(newtonspersquaremeter);
        }

        // Method overloads and with same number of parameters not supported in Universal Windows Platform (WinRT Components).
        // Decimal type not supported in Universal Windows Platform (WinRT Components).
#if WINDOWS_UWP
        private
#else
        public
#endif
        Elasticity(decimal newtonspersquaremeter)
        {
            _newtonsPerSquareMeter = Convert.ToDouble(newtonspersquaremeter);
        }

        #region Properties

        public static ElasticityUnit BaseUnit
        {
            get { return ElasticityUnit.NewtonPerSquareMeter; }
        }

        /// <summary>
        ///     Get Elasticity in Atmospheres.
        /// </summary>
        public double Atmospheres
        {
            get { return _newtonsPerSquareMeter/(1.01325*1e5); }
        }

        /// <summary>
        ///     Get Elasticity in Bars.
        /// </summary>
        public double Bars
        {
            get { return _newtonsPerSquareMeter/1e5; }
        }

        /// <summary>
        ///     Get Elasticity in Centibars.
        /// </summary>
        public double Centibars
        {
            get { return (_newtonsPerSquareMeter/1e5) / 1e-2d; }
        }

        /// <summary>
        ///     Get Elasticity in Decapascals.
        /// </summary>
        public double Decapascals
        {
            get { return (_newtonsPerSquareMeter) / 1e1d; }
        }

        /// <summary>
        ///     Get Elasticity in Decibars.
        /// </summary>
        public double Decibars
        {
            get { return (_newtonsPerSquareMeter/1e5) / 1e-1d; }
        }

        /// <summary>
        ///     Get Elasticity in Gigapascals.
        /// </summary>
        public double Gigapascals
        {
            get { return (_newtonsPerSquareMeter) / 1e9d; }
        }

        /// <summary>
        ///     Get Elasticity in Hectopascals.
        /// </summary>
        public double Hectopascals
        {
            get { return (_newtonsPerSquareMeter) / 1e2d; }
        }

        /// <summary>
        ///     Get Elasticity in Kilobars.
        /// </summary>
        public double Kilobars
        {
            get { return (_newtonsPerSquareMeter/1e5) / 1e3d; }
        }

        /// <summary>
        ///     Get Elasticity in KilogramsForcePerSquareCentimeter.
        /// </summary>
        public double KilogramsForcePerSquareCentimeter
        {
            get { return _newtonsPerSquareMeter/(9.80665*1e4); }
        }

        /// <summary>
        ///     Get Elasticity in KilogramsForcePerSquareMeter.
        /// </summary>
        public double KilogramsForcePerSquareMeter
        {
            get { return _newtonsPerSquareMeter*0.101971619222242; }
        }

        /// <summary>
        ///     Get Elasticity in KilogramsForcePerSquareMillimeter.
        /// </summary>
        public double KilogramsForcePerSquareMillimeter
        {
            get { return _newtonsPerSquareMeter*1.01971619222242E-07; }
        }

        /// <summary>
        ///     Get Elasticity in KilonewtonsPerSquareCentimeter.
        /// </summary>
        public double KilonewtonsPerSquareCentimeter
        {
            get { return (_newtonsPerSquareMeter/1e4) / 1e3d; }
        }

        /// <summary>
        ///     Get Elasticity in KilonewtonsPerSquareMeter.
        /// </summary>
        public double KilonewtonsPerSquareMeter
        {
            get { return (_newtonsPerSquareMeter) / 1e3d; }
        }

        /// <summary>
        ///     Get Elasticity in KilonewtonsPerSquareMillimeter.
        /// </summary>
        public double KilonewtonsPerSquareMillimeter
        {
            get { return (_newtonsPerSquareMeter/1e6) / 1e3d; }
        }

        /// <summary>
        ///     Get Elasticity in Kilopascals.
        /// </summary>
        public double Kilopascals
        {
            get { return (_newtonsPerSquareMeter) / 1e3d; }
        }

        /// <summary>
        ///     Get Elasticity in KilopoundsForcePerSquareFoot.
        /// </summary>
        public double KilopoundsForcePerSquareFoot
        {
            get { return (_newtonsPerSquareMeter*0.020885432426709) / 1e3d; }
        }

        /// <summary>
        ///     Get Elasticity in KilopoundsForcePerSquareInch.
        /// </summary>
        public double KilopoundsForcePerSquareInch
        {
            get { return (_newtonsPerSquareMeter*0.000145037725185479) / 1e3d; }
        }

        /// <summary>
        ///     Get Elasticity in Megabars.
        /// </summary>
        public double Megabars
        {
            get { return (_newtonsPerSquareMeter/1e5) / 1e6d; }
        }

        /// <summary>
        ///     Get Elasticity in Megapascals.
        /// </summary>
        public double Megapascals
        {
            get { return (_newtonsPerSquareMeter) / 1e6d; }
        }

        /// <summary>
        ///     Get Elasticity in Micropascals.
        /// </summary>
        public double Micropascals
        {
            get { return (_newtonsPerSquareMeter) / 1e-6d; }
        }

        /// <summary>
        ///     Get Elasticity in Millibars.
        /// </summary>
        public double Millibars
        {
            get { return (_newtonsPerSquareMeter/1e5) / 1e-3d; }
        }

        /// <summary>
        ///     Get Elasticity in NewtonsPerSquareCentimeter.
        /// </summary>
        public double NewtonsPerSquareCentimeter
        {
            get { return _newtonsPerSquareMeter/1e4; }
        }

        /// <summary>
        ///     Get Elasticity in NewtonsPerSquareMeter.
        /// </summary>
        public double NewtonsPerSquareMeter
        {
            get { return _newtonsPerSquareMeter; }
        }

        /// <summary>
        ///     Get Elasticity in NewtonsPerSquareMillimeter.
        /// </summary>
        public double NewtonsPerSquareMillimeter
        {
            get { return _newtonsPerSquareMeter/1e6; }
        }

        /// <summary>
        ///     Get Elasticity in Pascals.
        /// </summary>
        public double Pascals
        {
            get { return _newtonsPerSquareMeter; }
        }

        /// <summary>
        ///     Get Elasticity in PoundsForcePerSquareFoot.
        /// </summary>
        public double PoundsForcePerSquareFoot
        {
            get { return _newtonsPerSquareMeter*0.020885432426709; }
        }

        /// <summary>
        ///     Get Elasticity in PoundsForcePerSquareInch.
        /// </summary>
        public double PoundsForcePerSquareInch
        {
            get { return _newtonsPerSquareMeter*0.000145037725185479; }
        }

        /// <summary>
        ///     Get Elasticity in Psi.
        /// </summary>
        public double Psi
        {
            get { return _newtonsPerSquareMeter/(6.89464975179*1e3); }
        }

        /// <summary>
        ///     Get Elasticity in TechnicalAtmospheres.
        /// </summary>
        public double TechnicalAtmospheres
        {
            get { return _newtonsPerSquareMeter/(9.80680592331*1e4); }
        }

        /// <summary>
        ///     Get Elasticity in TonnesForcePerSquareCentimeter.
        /// </summary>
        public double TonnesForcePerSquareCentimeter
        {
            get { return _newtonsPerSquareMeter*1.01971619222242E-08; }
        }

        /// <summary>
        ///     Get Elasticity in TonnesForcePerSquareMeter.
        /// </summary>
        public double TonnesForcePerSquareMeter
        {
            get { return _newtonsPerSquareMeter*0.000101971619222242; }
        }

        /// <summary>
        ///     Get Elasticity in TonnesForcePerSquareMillimeter.
        /// </summary>
        public double TonnesForcePerSquareMillimeter
        {
            get { return _newtonsPerSquareMeter*1.01971619222242E-10; }
        }

        /// <summary>
        ///     Get Elasticity in Torrs.
        /// </summary>
        public double Torrs
        {
            get { return _newtonsPerSquareMeter/(1.3332266752*1e2); }
        }

        #endregion

        #region Static

        public static Elasticity Zero
        {
            get { return new Elasticity(); }
        }

        /// <summary>
        ///     Get Elasticity from Atmospheres.
        /// </summary>
        public static Elasticity FromAtmospheres(double atmospheres)
        {
            return new Elasticity(atmospheres*1.01325*1e5);
        }

        /// <summary>
        ///     Get Elasticity from Bars.
        /// </summary>
        public static Elasticity FromBars(double bars)
        {
            return new Elasticity(bars*1e5);
        }

        /// <summary>
        ///     Get Elasticity from Centibars.
        /// </summary>
        public static Elasticity FromCentibars(double centibars)
        {
            return new Elasticity((centibars*1e5) * 1e-2d);
        }

        /// <summary>
        ///     Get Elasticity from Decapascals.
        /// </summary>
        public static Elasticity FromDecapascals(double decapascals)
        {
            return new Elasticity((decapascals) * 1e1d);
        }

        /// <summary>
        ///     Get Elasticity from Decibars.
        /// </summary>
        public static Elasticity FromDecibars(double decibars)
        {
            return new Elasticity((decibars*1e5) * 1e-1d);
        }

        /// <summary>
        ///     Get Elasticity from Gigapascals.
        /// </summary>
        public static Elasticity FromGigapascals(double gigapascals)
        {
            return new Elasticity((gigapascals) * 1e9d);
        }

        /// <summary>
        ///     Get Elasticity from Hectopascals.
        /// </summary>
        public static Elasticity FromHectopascals(double hectopascals)
        {
            return new Elasticity((hectopascals) * 1e2d);
        }

        /// <summary>
        ///     Get Elasticity from Kilobars.
        /// </summary>
        public static Elasticity FromKilobars(double kilobars)
        {
            return new Elasticity((kilobars*1e5) * 1e3d);
        }

        /// <summary>
        ///     Get Elasticity from KilogramsForcePerSquareCentimeter.
        /// </summary>
        public static Elasticity FromKilogramsForcePerSquareCentimeter(double kilogramsforcepersquarecentimeter)
        {
            return new Elasticity(kilogramsforcepersquarecentimeter*9.80665*1e4);
        }

        /// <summary>
        ///     Get Elasticity from KilogramsForcePerSquareMeter.
        /// </summary>
        public static Elasticity FromKilogramsForcePerSquareMeter(double kilogramsforcepersquaremeter)
        {
            return new Elasticity(kilogramsforcepersquaremeter*9.80665019960652);
        }

        /// <summary>
        ///     Get Elasticity from KilogramsForcePerSquareMillimeter.
        /// </summary>
        public static Elasticity FromKilogramsForcePerSquareMillimeter(double kilogramsforcepersquaremillimeter)
        {
            return new Elasticity(kilogramsforcepersquaremillimeter*9806650.19960652);
        }

        /// <summary>
        ///     Get Elasticity from KilonewtonsPerSquareCentimeter.
        /// </summary>
        public static Elasticity FromKilonewtonsPerSquareCentimeter(double kilonewtonspersquarecentimeter)
        {
            return new Elasticity((kilonewtonspersquarecentimeter*1e4) * 1e3d);
        }

        /// <summary>
        ///     Get Elasticity from KilonewtonsPerSquareMeter.
        /// </summary>
        public static Elasticity FromKilonewtonsPerSquareMeter(double kilonewtonspersquaremeter)
        {
            return new Elasticity((kilonewtonspersquaremeter) * 1e3d);
        }

        /// <summary>
        ///     Get Elasticity from KilonewtonsPerSquareMillimeter.
        /// </summary>
        public static Elasticity FromKilonewtonsPerSquareMillimeter(double kilonewtonspersquaremillimeter)
        {
            return new Elasticity((kilonewtonspersquaremillimeter*1e6) * 1e3d);
        }

        /// <summary>
        ///     Get Elasticity from Kilopascals.
        /// </summary>
        public static Elasticity FromKilopascals(double kilopascals)
        {
            return new Elasticity((kilopascals) * 1e3d);
        }

        /// <summary>
        ///     Get Elasticity from KilopoundsForcePerSquareFoot.
        /// </summary>
        public static Elasticity FromKilopoundsForcePerSquareFoot(double kilopoundsforcepersquarefoot)
        {
            return new Elasticity((kilopoundsforcepersquarefoot*47.8802631216372) * 1e3d);
        }

        /// <summary>
        ///     Get Elasticity from KilopoundsForcePerSquareInch.
        /// </summary>
        public static Elasticity FromKilopoundsForcePerSquareInch(double kilopoundsforcepersquareinch)
        {
            return new Elasticity((kilopoundsforcepersquareinch*6894.75788951576) * 1e3d);
        }

        /// <summary>
        ///     Get Elasticity from Megabars.
        /// </summary>
        public static Elasticity FromMegabars(double megabars)
        {
            return new Elasticity((megabars*1e5) * 1e6d);
        }

        /// <summary>
        ///     Get Elasticity from Megapascals.
        /// </summary>
        public static Elasticity FromMegapascals(double megapascals)
        {
            return new Elasticity((megapascals) * 1e6d);
        }

        /// <summary>
        ///     Get Elasticity from Micropascals.
        /// </summary>
        public static Elasticity FromMicropascals(double micropascals)
        {
            return new Elasticity((micropascals) * 1e-6d);
        }

        /// <summary>
        ///     Get Elasticity from Millibars.
        /// </summary>
        public static Elasticity FromMillibars(double millibars)
        {
            return new Elasticity((millibars*1e5) * 1e-3d);
        }

        /// <summary>
        ///     Get Elasticity from NewtonsPerSquareCentimeter.
        /// </summary>
        public static Elasticity FromNewtonsPerSquareCentimeter(double newtonspersquarecentimeter)
        {
            return new Elasticity(newtonspersquarecentimeter*1e4);
        }

        /// <summary>
        ///     Get Elasticity from NewtonsPerSquareMeter.
        /// </summary>
        public static Elasticity FromNewtonsPerSquareMeter(double newtonspersquaremeter)
        {
            return new Elasticity(newtonspersquaremeter);
        }

        /// <summary>
        ///     Get Elasticity from NewtonsPerSquareMillimeter.
        /// </summary>
        public static Elasticity FromNewtonsPerSquareMillimeter(double newtonspersquaremillimeter)
        {
            return new Elasticity(newtonspersquaremillimeter*1e6);
        }

        /// <summary>
        ///     Get Elasticity from Pascals.
        /// </summary>
        public static Elasticity FromPascals(double pascals)
        {
            return new Elasticity(pascals);
        }

        /// <summary>
        ///     Get Elasticity from PoundsForcePerSquareFoot.
        /// </summary>
        public static Elasticity FromPoundsForcePerSquareFoot(double poundsforcepersquarefoot)
        {
            return new Elasticity(poundsforcepersquarefoot*47.8802631216372);
        }

        /// <summary>
        ///     Get Elasticity from PoundsForcePerSquareInch.
        /// </summary>
        public static Elasticity FromPoundsForcePerSquareInch(double poundsforcepersquareinch)
        {
            return new Elasticity(poundsforcepersquareinch*6894.75788951576);
        }

        /// <summary>
        ///     Get Elasticity from Psi.
        /// </summary>
        public static Elasticity FromPsi(double psi)
        {
            return new Elasticity(psi*6.89464975179*1e3);
        }

        /// <summary>
        ///     Get Elasticity from TechnicalAtmospheres.
        /// </summary>
        public static Elasticity FromTechnicalAtmospheres(double technicalatmospheres)
        {
            return new Elasticity(technicalatmospheres*9.80680592331*1e4);
        }

        /// <summary>
        ///     Get Elasticity from TonnesForcePerSquareCentimeter.
        /// </summary>
        public static Elasticity FromTonnesForcePerSquareCentimeter(double tonnesforcepersquarecentimeter)
        {
            return new Elasticity(tonnesforcepersquarecentimeter*98066501.9960652);
        }

        /// <summary>
        ///     Get Elasticity from TonnesForcePerSquareMeter.
        /// </summary>
        public static Elasticity FromTonnesForcePerSquareMeter(double tonnesforcepersquaremeter)
        {
            return new Elasticity(tonnesforcepersquaremeter*9806.65019960653);
        }

        /// <summary>
        ///     Get Elasticity from TonnesForcePerSquareMillimeter.
        /// </summary>
        public static Elasticity FromTonnesForcePerSquareMillimeter(double tonnesforcepersquaremillimeter)
        {
            return new Elasticity(tonnesforcepersquaremillimeter*9806650199.60653);
        }

        /// <summary>
        ///     Get Elasticity from Torrs.
        /// </summary>
        public static Elasticity FromTorrs(double torrs)
        {
            return new Elasticity(torrs*1.3332266752*1e2);
        }

#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Elasticity from nullable Atmospheres.
        /// </summary>
        public static Elasticity? FromAtmospheres(double? atmospheres)
        {
            if (atmospheres.HasValue)
            {
                return FromAtmospheres(atmospheres.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Bars.
        /// </summary>
        public static Elasticity? FromBars(double? bars)
        {
            if (bars.HasValue)
            {
                return FromBars(bars.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Centibars.
        /// </summary>
        public static Elasticity? FromCentibars(double? centibars)
        {
            if (centibars.HasValue)
            {
                return FromCentibars(centibars.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Decapascals.
        /// </summary>
        public static Elasticity? FromDecapascals(double? decapascals)
        {
            if (decapascals.HasValue)
            {
                return FromDecapascals(decapascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Decibars.
        /// </summary>
        public static Elasticity? FromDecibars(double? decibars)
        {
            if (decibars.HasValue)
            {
                return FromDecibars(decibars.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Gigapascals.
        /// </summary>
        public static Elasticity? FromGigapascals(double? gigapascals)
        {
            if (gigapascals.HasValue)
            {
                return FromGigapascals(gigapascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Hectopascals.
        /// </summary>
        public static Elasticity? FromHectopascals(double? hectopascals)
        {
            if (hectopascals.HasValue)
            {
                return FromHectopascals(hectopascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Kilobars.
        /// </summary>
        public static Elasticity? FromKilobars(double? kilobars)
        {
            if (kilobars.HasValue)
            {
                return FromKilobars(kilobars.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable KilogramsForcePerSquareCentimeter.
        /// </summary>
        public static Elasticity? FromKilogramsForcePerSquareCentimeter(double? kilogramsforcepersquarecentimeter)
        {
            if (kilogramsforcepersquarecentimeter.HasValue)
            {
                return FromKilogramsForcePerSquareCentimeter(kilogramsforcepersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable KilogramsForcePerSquareMeter.
        /// </summary>
        public static Elasticity? FromKilogramsForcePerSquareMeter(double? kilogramsforcepersquaremeter)
        {
            if (kilogramsforcepersquaremeter.HasValue)
            {
                return FromKilogramsForcePerSquareMeter(kilogramsforcepersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable KilogramsForcePerSquareMillimeter.
        /// </summary>
        public static Elasticity? FromKilogramsForcePerSquareMillimeter(double? kilogramsforcepersquaremillimeter)
        {
            if (kilogramsforcepersquaremillimeter.HasValue)
            {
                return FromKilogramsForcePerSquareMillimeter(kilogramsforcepersquaremillimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable KilonewtonsPerSquareCentimeter.
        /// </summary>
        public static Elasticity? FromKilonewtonsPerSquareCentimeter(double? kilonewtonspersquarecentimeter)
        {
            if (kilonewtonspersquarecentimeter.HasValue)
            {
                return FromKilonewtonsPerSquareCentimeter(kilonewtonspersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable KilonewtonsPerSquareMeter.
        /// </summary>
        public static Elasticity? FromKilonewtonsPerSquareMeter(double? kilonewtonspersquaremeter)
        {
            if (kilonewtonspersquaremeter.HasValue)
            {
                return FromKilonewtonsPerSquareMeter(kilonewtonspersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable KilonewtonsPerSquareMillimeter.
        /// </summary>
        public static Elasticity? FromKilonewtonsPerSquareMillimeter(double? kilonewtonspersquaremillimeter)
        {
            if (kilonewtonspersquaremillimeter.HasValue)
            {
                return FromKilonewtonsPerSquareMillimeter(kilonewtonspersquaremillimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Kilopascals.
        /// </summary>
        public static Elasticity? FromKilopascals(double? kilopascals)
        {
            if (kilopascals.HasValue)
            {
                return FromKilopascals(kilopascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable KilopoundsForcePerSquareFoot.
        /// </summary>
        public static Elasticity? FromKilopoundsForcePerSquareFoot(double? kilopoundsforcepersquarefoot)
        {
            if (kilopoundsforcepersquarefoot.HasValue)
            {
                return FromKilopoundsForcePerSquareFoot(kilopoundsforcepersquarefoot.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable KilopoundsForcePerSquareInch.
        /// </summary>
        public static Elasticity? FromKilopoundsForcePerSquareInch(double? kilopoundsforcepersquareinch)
        {
            if (kilopoundsforcepersquareinch.HasValue)
            {
                return FromKilopoundsForcePerSquareInch(kilopoundsforcepersquareinch.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Megabars.
        /// </summary>
        public static Elasticity? FromMegabars(double? megabars)
        {
            if (megabars.HasValue)
            {
                return FromMegabars(megabars.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Megapascals.
        /// </summary>
        public static Elasticity? FromMegapascals(double? megapascals)
        {
            if (megapascals.HasValue)
            {
                return FromMegapascals(megapascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Micropascals.
        /// </summary>
        public static Elasticity? FromMicropascals(double? micropascals)
        {
            if (micropascals.HasValue)
            {
                return FromMicropascals(micropascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Millibars.
        /// </summary>
        public static Elasticity? FromMillibars(double? millibars)
        {
            if (millibars.HasValue)
            {
                return FromMillibars(millibars.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable NewtonsPerSquareCentimeter.
        /// </summary>
        public static Elasticity? FromNewtonsPerSquareCentimeter(double? newtonspersquarecentimeter)
        {
            if (newtonspersquarecentimeter.HasValue)
            {
                return FromNewtonsPerSquareCentimeter(newtonspersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable NewtonsPerSquareMeter.
        /// </summary>
        public static Elasticity? FromNewtonsPerSquareMeter(double? newtonspersquaremeter)
        {
            if (newtonspersquaremeter.HasValue)
            {
                return FromNewtonsPerSquareMeter(newtonspersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable NewtonsPerSquareMillimeter.
        /// </summary>
        public static Elasticity? FromNewtonsPerSquareMillimeter(double? newtonspersquaremillimeter)
        {
            if (newtonspersquaremillimeter.HasValue)
            {
                return FromNewtonsPerSquareMillimeter(newtonspersquaremillimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Pascals.
        /// </summary>
        public static Elasticity? FromPascals(double? pascals)
        {
            if (pascals.HasValue)
            {
                return FromPascals(pascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable PoundsForcePerSquareFoot.
        /// </summary>
        public static Elasticity? FromPoundsForcePerSquareFoot(double? poundsforcepersquarefoot)
        {
            if (poundsforcepersquarefoot.HasValue)
            {
                return FromPoundsForcePerSquareFoot(poundsforcepersquarefoot.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable PoundsForcePerSquareInch.
        /// </summary>
        public static Elasticity? FromPoundsForcePerSquareInch(double? poundsforcepersquareinch)
        {
            if (poundsforcepersquareinch.HasValue)
            {
                return FromPoundsForcePerSquareInch(poundsforcepersquareinch.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Psi.
        /// </summary>
        public static Elasticity? FromPsi(double? psi)
        {
            if (psi.HasValue)
            {
                return FromPsi(psi.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable TechnicalAtmospheres.
        /// </summary>
        public static Elasticity? FromTechnicalAtmospheres(double? technicalatmospheres)
        {
            if (technicalatmospheres.HasValue)
            {
                return FromTechnicalAtmospheres(technicalatmospheres.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable TonnesForcePerSquareCentimeter.
        /// </summary>
        public static Elasticity? FromTonnesForcePerSquareCentimeter(double? tonnesforcepersquarecentimeter)
        {
            if (tonnesforcepersquarecentimeter.HasValue)
            {
                return FromTonnesForcePerSquareCentimeter(tonnesforcepersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable TonnesForcePerSquareMeter.
        /// </summary>
        public static Elasticity? FromTonnesForcePerSquareMeter(double? tonnesforcepersquaremeter)
        {
            if (tonnesforcepersquaremeter.HasValue)
            {
                return FromTonnesForcePerSquareMeter(tonnesforcepersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable TonnesForcePerSquareMillimeter.
        /// </summary>
        public static Elasticity? FromTonnesForcePerSquareMillimeter(double? tonnesforcepersquaremillimeter)
        {
            if (tonnesforcepersquaremillimeter.HasValue)
            {
                return FromTonnesForcePerSquareMillimeter(tonnesforcepersquaremillimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Elasticity from nullable Torrs.
        /// </summary>
        public static Elasticity? FromTorrs(double? torrs)
        {
            if (torrs.HasValue)
            {
                return FromTorrs(torrs.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElasticityUnit" /> to <see cref="Elasticity" />.
        /// </summary>
        /// <param name="val">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Elasticity unit value.</returns>
        public static Elasticity From(double val, ElasticityUnit fromUnit)
        {
            switch (fromUnit)
            {
                case ElasticityUnit.Atmosphere:
                    return FromAtmospheres(val);
                case ElasticityUnit.Bar:
                    return FromBars(val);
                case ElasticityUnit.Centibar:
                    return FromCentibars(val);
                case ElasticityUnit.Decapascal:
                    return FromDecapascals(val);
                case ElasticityUnit.Decibar:
                    return FromDecibars(val);
                case ElasticityUnit.Gigapascal:
                    return FromGigapascals(val);
                case ElasticityUnit.Hectopascal:
                    return FromHectopascals(val);
                case ElasticityUnit.Kilobar:
                    return FromKilobars(val);
                case ElasticityUnit.KilogramForcePerSquareCentimeter:
                    return FromKilogramsForcePerSquareCentimeter(val);
                case ElasticityUnit.KilogramForcePerSquareMeter:
                    return FromKilogramsForcePerSquareMeter(val);
                case ElasticityUnit.KilogramForcePerSquareMillimeter:
                    return FromKilogramsForcePerSquareMillimeter(val);
                case ElasticityUnit.KilonewtonPerSquareCentimeter:
                    return FromKilonewtonsPerSquareCentimeter(val);
                case ElasticityUnit.KilonewtonPerSquareMeter:
                    return FromKilonewtonsPerSquareMeter(val);
                case ElasticityUnit.KilonewtonPerSquareMillimeter:
                    return FromKilonewtonsPerSquareMillimeter(val);
                case ElasticityUnit.Kilopascal:
                    return FromKilopascals(val);
                case ElasticityUnit.KilopoundForcePerSquareFoot:
                    return FromKilopoundsForcePerSquareFoot(val);
                case ElasticityUnit.KilopoundForcePerSquareInch:
                    return FromKilopoundsForcePerSquareInch(val);
                case ElasticityUnit.Megabar:
                    return FromMegabars(val);
                case ElasticityUnit.Megapascal:
                    return FromMegapascals(val);
                case ElasticityUnit.Micropascal:
                    return FromMicropascals(val);
                case ElasticityUnit.Millibar:
                    return FromMillibars(val);
                case ElasticityUnit.NewtonPerSquareCentimeter:
                    return FromNewtonsPerSquareCentimeter(val);
                case ElasticityUnit.NewtonPerSquareMeter:
                    return FromNewtonsPerSquareMeter(val);
                case ElasticityUnit.NewtonPerSquareMillimeter:
                    return FromNewtonsPerSquareMillimeter(val);
                case ElasticityUnit.Pascal:
                    return FromPascals(val);
                case ElasticityUnit.PoundForcePerSquareFoot:
                    return FromPoundsForcePerSquareFoot(val);
                case ElasticityUnit.PoundForcePerSquareInch:
                    return FromPoundsForcePerSquareInch(val);
                case ElasticityUnit.Psi:
                    return FromPsi(val);
                case ElasticityUnit.TechnicalAtmosphere:
                    return FromTechnicalAtmospheres(val);
                case ElasticityUnit.TonneForcePerSquareCentimeter:
                    return FromTonnesForcePerSquareCentimeter(val);
                case ElasticityUnit.TonneForcePerSquareMeter:
                    return FromTonnesForcePerSquareMeter(val);
                case ElasticityUnit.TonneForcePerSquareMillimeter:
                    return FromTonnesForcePerSquareMillimeter(val);
                case ElasticityUnit.Torr:
                    return FromTorrs(val);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }

#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElasticityUnit" /> to <see cref="Elasticity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Elasticity unit value.</returns>
        public static Elasticity? From(double? value, ElasticityUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }
            switch (fromUnit)
            {
                case ElasticityUnit.Atmosphere:
                    return FromAtmospheres(value.Value);
                case ElasticityUnit.Bar:
                    return FromBars(value.Value);
                case ElasticityUnit.Centibar:
                    return FromCentibars(value.Value);
                case ElasticityUnit.Decapascal:
                    return FromDecapascals(value.Value);
                case ElasticityUnit.Decibar:
                    return FromDecibars(value.Value);
                case ElasticityUnit.Gigapascal:
                    return FromGigapascals(value.Value);
                case ElasticityUnit.Hectopascal:
                    return FromHectopascals(value.Value);
                case ElasticityUnit.Kilobar:
                    return FromKilobars(value.Value);
                case ElasticityUnit.KilogramForcePerSquareCentimeter:
                    return FromKilogramsForcePerSquareCentimeter(value.Value);
                case ElasticityUnit.KilogramForcePerSquareMeter:
                    return FromKilogramsForcePerSquareMeter(value.Value);
                case ElasticityUnit.KilogramForcePerSquareMillimeter:
                    return FromKilogramsForcePerSquareMillimeter(value.Value);
                case ElasticityUnit.KilonewtonPerSquareCentimeter:
                    return FromKilonewtonsPerSquareCentimeter(value.Value);
                case ElasticityUnit.KilonewtonPerSquareMeter:
                    return FromKilonewtonsPerSquareMeter(value.Value);
                case ElasticityUnit.KilonewtonPerSquareMillimeter:
                    return FromKilonewtonsPerSquareMillimeter(value.Value);
                case ElasticityUnit.Kilopascal:
                    return FromKilopascals(value.Value);
                case ElasticityUnit.KilopoundForcePerSquareFoot:
                    return FromKilopoundsForcePerSquareFoot(value.Value);
                case ElasticityUnit.KilopoundForcePerSquareInch:
                    return FromKilopoundsForcePerSquareInch(value.Value);
                case ElasticityUnit.Megabar:
                    return FromMegabars(value.Value);
                case ElasticityUnit.Megapascal:
                    return FromMegapascals(value.Value);
                case ElasticityUnit.Micropascal:
                    return FromMicropascals(value.Value);
                case ElasticityUnit.Millibar:
                    return FromMillibars(value.Value);
                case ElasticityUnit.NewtonPerSquareCentimeter:
                    return FromNewtonsPerSquareCentimeter(value.Value);
                case ElasticityUnit.NewtonPerSquareMeter:
                    return FromNewtonsPerSquareMeter(value.Value);
                case ElasticityUnit.NewtonPerSquareMillimeter:
                    return FromNewtonsPerSquareMillimeter(value.Value);
                case ElasticityUnit.Pascal:
                    return FromPascals(value.Value);
                case ElasticityUnit.PoundForcePerSquareFoot:
                    return FromPoundsForcePerSquareFoot(value.Value);
                case ElasticityUnit.PoundForcePerSquareInch:
                    return FromPoundsForcePerSquareInch(value.Value);
                case ElasticityUnit.Psi:
                    return FromPsi(value.Value);
                case ElasticityUnit.TechnicalAtmosphere:
                    return FromTechnicalAtmospheres(value.Value);
                case ElasticityUnit.TonneForcePerSquareCentimeter:
                    return FromTonnesForcePerSquareCentimeter(value.Value);
                case ElasticityUnit.TonneForcePerSquareMeter:
                    return FromTonnesForcePerSquareMeter(value.Value);
                case ElasticityUnit.TonneForcePerSquareMillimeter:
                    return FromTonnesForcePerSquareMillimeter(value.Value);
                case ElasticityUnit.Torr:
                    return FromTorrs(value.Value);

                default:
                    throw new NotImplementedException("fromUnit: " + fromUnit);
            }
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(ElasticityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <param name="culture">Culture to use for localization. Defaults to Thread.CurrentUICulture.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(ElasticityUnit unit, [CanBeNull] Culture culture)
        {
            return UnitSystem.GetCached(culture).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

#if !WINDOWS_UWP
        public static Elasticity operator -(Elasticity right)
        {
            return new Elasticity(-right._newtonsPerSquareMeter);
        }

        public static Elasticity operator +(Elasticity left, Elasticity right)
        {
            return new Elasticity(left._newtonsPerSquareMeter + right._newtonsPerSquareMeter);
        }

        public static Elasticity operator -(Elasticity left, Elasticity right)
        {
            return new Elasticity(left._newtonsPerSquareMeter - right._newtonsPerSquareMeter);
        }

        public static Elasticity operator *(double left, Elasticity right)
        {
            return new Elasticity(left*right._newtonsPerSquareMeter);
        }

        public static Elasticity operator *(Elasticity left, double right)
        {
            return new Elasticity(left._newtonsPerSquareMeter*(double)right);
        }

        public static Elasticity operator /(Elasticity left, double right)
        {
            return new Elasticity(left._newtonsPerSquareMeter/(double)right);
        }

        public static double operator /(Elasticity left, Elasticity right)
        {
            return Convert.ToDouble(left._newtonsPerSquareMeter/right._newtonsPerSquareMeter);
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Elasticity)) throw new ArgumentException("Expected type Elasticity.", "obj");
            return CompareTo((Elasticity) obj);
        }

#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Elasticity other)
        {
            return _newtonsPerSquareMeter.CompareTo(other._newtonsPerSquareMeter);
        }

#if !WINDOWS_UWP
        public static bool operator <=(Elasticity left, Elasticity right)
        {
            return left._newtonsPerSquareMeter <= right._newtonsPerSquareMeter;
        }

        public static bool operator >=(Elasticity left, Elasticity right)
        {
            return left._newtonsPerSquareMeter >= right._newtonsPerSquareMeter;
        }

        public static bool operator <(Elasticity left, Elasticity right)
        {
            return left._newtonsPerSquareMeter < right._newtonsPerSquareMeter;
        }

        public static bool operator >(Elasticity left, Elasticity right)
        {
            return left._newtonsPerSquareMeter > right._newtonsPerSquareMeter;
        }

        public static bool operator ==(Elasticity left, Elasticity right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._newtonsPerSquareMeter == right._newtonsPerSquareMeter;
        }

        public static bool operator !=(Elasticity left, Elasticity right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left._newtonsPerSquareMeter != right._newtonsPerSquareMeter;
        }
#endif

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return _newtonsPerSquareMeter.Equals(((Elasticity) obj)._newtonsPerSquareMeter);
        }

        public override int GetHashCode()
        {
            return _newtonsPerSquareMeter.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value in new unit if successful, exception otherwise.</returns>
        /// <exception cref="NotImplementedException">If conversion was not successful.</exception>
        public double As(ElasticityUnit unit)
        {
            switch (unit)
            {
                case ElasticityUnit.Atmosphere:
                    return Atmospheres;
                case ElasticityUnit.Bar:
                    return Bars;
                case ElasticityUnit.Centibar:
                    return Centibars;
                case ElasticityUnit.Decapascal:
                    return Decapascals;
                case ElasticityUnit.Decibar:
                    return Decibars;
                case ElasticityUnit.Gigapascal:
                    return Gigapascals;
                case ElasticityUnit.Hectopascal:
                    return Hectopascals;
                case ElasticityUnit.Kilobar:
                    return Kilobars;
                case ElasticityUnit.KilogramForcePerSquareCentimeter:
                    return KilogramsForcePerSquareCentimeter;
                case ElasticityUnit.KilogramForcePerSquareMeter:
                    return KilogramsForcePerSquareMeter;
                case ElasticityUnit.KilogramForcePerSquareMillimeter:
                    return KilogramsForcePerSquareMillimeter;
                case ElasticityUnit.KilonewtonPerSquareCentimeter:
                    return KilonewtonsPerSquareCentimeter;
                case ElasticityUnit.KilonewtonPerSquareMeter:
                    return KilonewtonsPerSquareMeter;
                case ElasticityUnit.KilonewtonPerSquareMillimeter:
                    return KilonewtonsPerSquareMillimeter;
                case ElasticityUnit.Kilopascal:
                    return Kilopascals;
                case ElasticityUnit.KilopoundForcePerSquareFoot:
                    return KilopoundsForcePerSquareFoot;
                case ElasticityUnit.KilopoundForcePerSquareInch:
                    return KilopoundsForcePerSquareInch;
                case ElasticityUnit.Megabar:
                    return Megabars;
                case ElasticityUnit.Megapascal:
                    return Megapascals;
                case ElasticityUnit.Micropascal:
                    return Micropascals;
                case ElasticityUnit.Millibar:
                    return Millibars;
                case ElasticityUnit.NewtonPerSquareCentimeter:
                    return NewtonsPerSquareCentimeter;
                case ElasticityUnit.NewtonPerSquareMeter:
                    return NewtonsPerSquareMeter;
                case ElasticityUnit.NewtonPerSquareMillimeter:
                    return NewtonsPerSquareMillimeter;
                case ElasticityUnit.Pascal:
                    return Pascals;
                case ElasticityUnit.PoundForcePerSquareFoot:
                    return PoundsForcePerSquareFoot;
                case ElasticityUnit.PoundForcePerSquareInch:
                    return PoundsForcePerSquareInch;
                case ElasticityUnit.Psi:
                    return Psi;
                case ElasticityUnit.TechnicalAtmosphere:
                    return TechnicalAtmospheres;
                case ElasticityUnit.TonneForcePerSquareCentimeter:
                    return TonnesForcePerSquareCentimeter;
                case ElasticityUnit.TonneForcePerSquareMeter:
                    return TonnesForcePerSquareMeter;
                case ElasticityUnit.TonneForcePerSquareMillimeter:
                    return TonnesForcePerSquareMillimeter;
                case ElasticityUnit.Torr:
                    return Torrs;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Elasticity Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Elasticity Parse(string str, [CanBeNull] Culture culture)
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            return UnitParser.ParseUnit<Elasticity>(str, formatProvider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    ElasticityUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromNewtonsPerSquareMeter(x.NewtonsPerSquareMeter + y.NewtonsPerSquareMeter));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Elasticity result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="culture">Format to use when parsing number and unit. If it is null, it defaults to <see cref="NumberFormatInfo.CurrentInfo"/> for parsing the number and <see cref="CultureInfo.CurrentUICulture"/> for parsing the unit abbreviation by culture/language.</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] Culture culture, out Elasticity result)
        {
            try
            {
                result = Parse(str, culture);
                return true;
            }
            catch
            {
                result = default(Elasticity);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElasticityUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ElasticityUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static ElasticityUnit ParseUnit(string str, IFormatProvider formatProvider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(formatProvider);
            var unit = unitSystem.Parse<ElasticityUnit>(str.Trim());

            if (unit == ElasticityUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized ElasticityUnit.");
                newEx.Data["input"] = str;
                newEx.Data["formatprovider"] = formatProvider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        /// <summary>
        ///     Set the default unit used by ToString(). Default is NewtonPerSquareMeter
        /// </summary>
        public static ElasticityUnit ToStringDefaultUnit { get; set; } = ElasticityUnit.NewtonPerSquareMeter;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(ToStringDefaultUnit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(ElasticityUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <returns>String representation.</returns>
        public string ToString(ElasticityUnit unit, [CanBeNull] Culture culture)
        {
            return ToString(unit, culture, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(ElasticityUnit unit, [CanBeNull] Culture culture, int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(unit, culture, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="culture">Culture to use for localization and number formatting.</param>
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(ElasticityUnit unit, [CanBeNull] Culture culture, [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            IFormatProvider formatProvider = culture == null ? null : new CultureInfo(culture);
#else
            IFormatProvider formatProvider = culture;
#endif
            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, formatProvider, args);
            return string.Format(formatProvider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Elasticity
        /// </summary>
        public static Elasticity MaxValue
        {
            get
            {
                return new Elasticity(double.MaxValue);
            }
        }

        /// <summary>
        /// Represents the smallest possible value of Elasticity
        /// </summary>
        public static Elasticity MinValue
        {
            get
            {
                return new Elasticity(double.MinValue);
            }
        }
    }
}
