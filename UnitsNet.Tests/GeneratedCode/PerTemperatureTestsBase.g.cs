//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \GenerateUnits.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add Scripts\UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using NUnit.Framework;
using UnitsNet.Units;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of PerTemperature.
    /// </summary>
    [TestFixture]
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PerTemperatureTestsBase
    {
        protected abstract double PerDegreesCelsiusInOnePerKelvin { get; }
        protected abstract double PerDegreesDelisleInOnePerKelvin { get; }
        protected abstract double PerDegreesFahrenheitInOnePerKelvin { get; }
        protected abstract double PerDegreesNewtonInOnePerKelvin { get; }
        protected abstract double PerDegreesRankineInOnePerKelvin { get; }
        protected abstract double PerDegreesReaumurInOnePerKelvin { get; }
        protected abstract double PerDegreesRoemerInOnePerKelvin { get; }
        protected abstract double PerKelvinsInOnePerKelvin { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double PerDegreesCelsiusTolerance { get { return 1e-5; } }
        protected virtual double PerDegreesDelisleTolerance { get { return 1e-5; } }
        protected virtual double PerDegreesFahrenheitTolerance { get { return 1e-5; } }
        protected virtual double PerDegreesNewtonTolerance { get { return 1e-5; } }
        protected virtual double PerDegreesRankineTolerance { get { return 1e-5; } }
        protected virtual double PerDegreesReaumurTolerance { get { return 1e-5; } }
        protected virtual double PerDegreesRoemerTolerance { get { return 1e-5; } }
        protected virtual double PerKelvinsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Test]
        public void PerKelvinToPerTemperatureUnits()
        {
            PerTemperature perkelvin = PerTemperature.FromPerKelvins(1);
            Assert.AreEqual(PerDegreesCelsiusInOnePerKelvin, perkelvin.PerDegreesCelsius, PerDegreesCelsiusTolerance);
            Assert.AreEqual(PerDegreesDelisleInOnePerKelvin, perkelvin.PerDegreesDelisle, PerDegreesDelisleTolerance);
            Assert.AreEqual(PerDegreesFahrenheitInOnePerKelvin, perkelvin.PerDegreesFahrenheit, PerDegreesFahrenheitTolerance);
            Assert.AreEqual(PerDegreesNewtonInOnePerKelvin, perkelvin.PerDegreesNewton, PerDegreesNewtonTolerance);
            Assert.AreEqual(PerDegreesRankineInOnePerKelvin, perkelvin.PerDegreesRankine, PerDegreesRankineTolerance);
            Assert.AreEqual(PerDegreesReaumurInOnePerKelvin, perkelvin.PerDegreesReaumur, PerDegreesReaumurTolerance);
            Assert.AreEqual(PerDegreesRoemerInOnePerKelvin, perkelvin.PerDegreesRoemer, PerDegreesRoemerTolerance);
            Assert.AreEqual(PerKelvinsInOnePerKelvin, perkelvin.PerKelvins, PerKelvinsTolerance);
        }

        [Test]
        public void FromValueAndUnit()
        {
            Assert.AreEqual(1, PerTemperature.From(1, PerTemperatureUnit.PerDegreeCelsius).PerDegreesCelsius, PerDegreesCelsiusTolerance);
            Assert.AreEqual(1, PerTemperature.From(1, PerTemperatureUnit.PerDegreeDelisle).PerDegreesDelisle, PerDegreesDelisleTolerance);
            Assert.AreEqual(1, PerTemperature.From(1, PerTemperatureUnit.PerDegreeFahrenheit).PerDegreesFahrenheit, PerDegreesFahrenheitTolerance);
            Assert.AreEqual(1, PerTemperature.From(1, PerTemperatureUnit.PerDegreeNewton).PerDegreesNewton, PerDegreesNewtonTolerance);
            Assert.AreEqual(1, PerTemperature.From(1, PerTemperatureUnit.PerDegreeRankine).PerDegreesRankine, PerDegreesRankineTolerance);
            Assert.AreEqual(1, PerTemperature.From(1, PerTemperatureUnit.PerDegreeReaumur).PerDegreesReaumur, PerDegreesReaumurTolerance);
            Assert.AreEqual(1, PerTemperature.From(1, PerTemperatureUnit.PerDegreeRoemer).PerDegreesRoemer, PerDegreesRoemerTolerance);
            Assert.AreEqual(1, PerTemperature.From(1, PerTemperatureUnit.PerKelvin).PerKelvins, PerKelvinsTolerance);
        }

        [Test]
        public void As()
        {
            var perkelvin = PerTemperature.FromPerKelvins(1);
            Assert.AreEqual(PerDegreesCelsiusInOnePerKelvin, perkelvin.As(PerTemperatureUnit.PerDegreeCelsius), PerDegreesCelsiusTolerance);
            Assert.AreEqual(PerDegreesDelisleInOnePerKelvin, perkelvin.As(PerTemperatureUnit.PerDegreeDelisle), PerDegreesDelisleTolerance);
            Assert.AreEqual(PerDegreesFahrenheitInOnePerKelvin, perkelvin.As(PerTemperatureUnit.PerDegreeFahrenheit), PerDegreesFahrenheitTolerance);
            Assert.AreEqual(PerDegreesNewtonInOnePerKelvin, perkelvin.As(PerTemperatureUnit.PerDegreeNewton), PerDegreesNewtonTolerance);
            Assert.AreEqual(PerDegreesRankineInOnePerKelvin, perkelvin.As(PerTemperatureUnit.PerDegreeRankine), PerDegreesRankineTolerance);
            Assert.AreEqual(PerDegreesReaumurInOnePerKelvin, perkelvin.As(PerTemperatureUnit.PerDegreeReaumur), PerDegreesReaumurTolerance);
            Assert.AreEqual(PerDegreesRoemerInOnePerKelvin, perkelvin.As(PerTemperatureUnit.PerDegreeRoemer), PerDegreesRoemerTolerance);
            Assert.AreEqual(PerKelvinsInOnePerKelvin, perkelvin.As(PerTemperatureUnit.PerKelvin), PerKelvinsTolerance);
        }

        [Test]
        public void ConversionRoundTrip()
        {
            PerTemperature perkelvin = PerTemperature.FromPerKelvins(1);
            Assert.AreEqual(1, PerTemperature.FromPerDegreesCelsius(perkelvin.PerDegreesCelsius).PerKelvins, PerDegreesCelsiusTolerance);
            Assert.AreEqual(1, PerTemperature.FromPerDegreesDelisle(perkelvin.PerDegreesDelisle).PerKelvins, PerDegreesDelisleTolerance);
            Assert.AreEqual(1, PerTemperature.FromPerDegreesFahrenheit(perkelvin.PerDegreesFahrenheit).PerKelvins, PerDegreesFahrenheitTolerance);
            Assert.AreEqual(1, PerTemperature.FromPerDegreesNewton(perkelvin.PerDegreesNewton).PerKelvins, PerDegreesNewtonTolerance);
            Assert.AreEqual(1, PerTemperature.FromPerDegreesRankine(perkelvin.PerDegreesRankine).PerKelvins, PerDegreesRankineTolerance);
            Assert.AreEqual(1, PerTemperature.FromPerDegreesReaumur(perkelvin.PerDegreesReaumur).PerKelvins, PerDegreesReaumurTolerance);
            Assert.AreEqual(1, PerTemperature.FromPerDegreesRoemer(perkelvin.PerDegreesRoemer).PerKelvins, PerDegreesRoemerTolerance);
            Assert.AreEqual(1, PerTemperature.FromPerKelvins(perkelvin.PerKelvins).PerKelvins, PerKelvinsTolerance);
        }

        [Test]
        public void ArithmeticOperators()
        {
            PerTemperature v = PerTemperature.FromPerKelvins(1);
            Assert.AreEqual(-1, -v.PerKelvins, PerKelvinsTolerance);
            Assert.AreEqual(2, (PerTemperature.FromPerKelvins(3)-v).PerKelvins, PerKelvinsTolerance);
            Assert.AreEqual(2, (v + v).PerKelvins, PerKelvinsTolerance);
            Assert.AreEqual(10, (v*10).PerKelvins, PerKelvinsTolerance);
            Assert.AreEqual(10, (10*v).PerKelvins, PerKelvinsTolerance);
            Assert.AreEqual(2, (PerTemperature.FromPerKelvins(10)/5).PerKelvins, PerKelvinsTolerance);
            Assert.AreEqual(2, PerTemperature.FromPerKelvins(10)/PerTemperature.FromPerKelvins(5), PerKelvinsTolerance);
        }

        [Test]
        public void ComparisonOperators()
        {
            PerTemperature onePerKelvin = PerTemperature.FromPerKelvins(1);
            PerTemperature twoPerKelvins = PerTemperature.FromPerKelvins(2);

            Assert.True(onePerKelvin < twoPerKelvins);
            Assert.True(onePerKelvin <= twoPerKelvins);
            Assert.True(twoPerKelvins > onePerKelvin);
            Assert.True(twoPerKelvins >= onePerKelvin);

            Assert.False(onePerKelvin > twoPerKelvins);
            Assert.False(onePerKelvin >= twoPerKelvins);
            Assert.False(twoPerKelvins < onePerKelvin);
            Assert.False(twoPerKelvins <= onePerKelvin);
        }

        [Test]
        public void CompareToIsImplemented()
        {
            PerTemperature perkelvin = PerTemperature.FromPerKelvins(1);
            Assert.AreEqual(0, perkelvin.CompareTo(perkelvin));
            Assert.Greater(perkelvin.CompareTo(PerTemperature.Zero), 0);
            Assert.Less(PerTemperature.Zero.CompareTo(perkelvin), 0);
        }

        [Test]
        [ExpectedException(typeof(ArgumentException))]
        public void CompareToThrowsOnTypeMismatch()
        {
            PerTemperature perkelvin = PerTemperature.FromPerKelvins(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            perkelvin.CompareTo(new object());
        }

        [Test]
        [ExpectedException(typeof(ArgumentNullException))]
        public void CompareToThrowsOnNull()
        {
            PerTemperature perkelvin = PerTemperature.FromPerKelvins(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            perkelvin.CompareTo(null);
        }


        [Test]
        public void EqualityOperators()
        {
            PerTemperature a = PerTemperature.FromPerKelvins(1);
            PerTemperature b = PerTemperature.FromPerKelvins(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Test]
        public void EqualsIsImplemented()
        {
            PerTemperature v = PerTemperature.FromPerKelvins(1);
            Assert.IsTrue(v.Equals(PerTemperature.FromPerKelvins(1)));
            Assert.IsFalse(v.Equals(PerTemperature.Zero));
        }

        [Test]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            PerTemperature perkelvin = PerTemperature.FromPerKelvins(1);
            Assert.IsFalse(perkelvin.Equals(new object()));
        }

        [Test]
        public void EqualsReturnsFalseOnNull()
        {
            PerTemperature perkelvin = PerTemperature.FromPerKelvins(1);
            Assert.IsFalse(perkelvin.Equals(null));
        }
    }
}
