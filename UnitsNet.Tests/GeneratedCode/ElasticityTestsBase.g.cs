//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \GenerateUnits.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add Scripts\UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using NUnit.Framework;
using UnitsNet.Units;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Elasticity.
    /// </summary>
    [TestFixture]
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElasticityTestsBase
    {
        protected abstract double AtmospheresInOneNewtonPerSquareMeter { get; }
        protected abstract double BarsInOneNewtonPerSquareMeter { get; }
        protected abstract double CentibarsInOneNewtonPerSquareMeter { get; }
        protected abstract double DecapascalsInOneNewtonPerSquareMeter { get; }
        protected abstract double DecibarsInOneNewtonPerSquareMeter { get; }
        protected abstract double GigapascalsInOneNewtonPerSquareMeter { get; }
        protected abstract double HectopascalsInOneNewtonPerSquareMeter { get; }
        protected abstract double KilobarsInOneNewtonPerSquareMeter { get; }
        protected abstract double KilogramsForcePerSquareCentimeterInOneNewtonPerSquareMeter { get; }
        protected abstract double KilogramsForcePerSquareMeterInOneNewtonPerSquareMeter { get; }
        protected abstract double KilogramsForcePerSquareMillimeterInOneNewtonPerSquareMeter { get; }
        protected abstract double KilonewtonsPerSquareCentimeterInOneNewtonPerSquareMeter { get; }
        protected abstract double KilonewtonsPerSquareMeterInOneNewtonPerSquareMeter { get; }
        protected abstract double KilonewtonsPerSquareMillimeterInOneNewtonPerSquareMeter { get; }
        protected abstract double KilopascalsInOneNewtonPerSquareMeter { get; }
        protected abstract double KilopoundsForcePerSquareFootInOneNewtonPerSquareMeter { get; }
        protected abstract double KilopoundsForcePerSquareInchInOneNewtonPerSquareMeter { get; }
        protected abstract double MegabarsInOneNewtonPerSquareMeter { get; }
        protected abstract double MegapascalsInOneNewtonPerSquareMeter { get; }
        protected abstract double MicropascalsInOneNewtonPerSquareMeter { get; }
        protected abstract double MillibarsInOneNewtonPerSquareMeter { get; }
        protected abstract double NewtonsPerSquareCentimeterInOneNewtonPerSquareMeter { get; }
        protected abstract double NewtonsPerSquareMeterInOneNewtonPerSquareMeter { get; }
        protected abstract double NewtonsPerSquareMillimeterInOneNewtonPerSquareMeter { get; }
        protected abstract double PascalsInOneNewtonPerSquareMeter { get; }
        protected abstract double PoundsForcePerSquareFootInOneNewtonPerSquareMeter { get; }
        protected abstract double PoundsForcePerSquareInchInOneNewtonPerSquareMeter { get; }
        protected abstract double PsiInOneNewtonPerSquareMeter { get; }
        protected abstract double TechnicalAtmospheresInOneNewtonPerSquareMeter { get; }
        protected abstract double TonnesForcePerSquareCentimeterInOneNewtonPerSquareMeter { get; }
        protected abstract double TonnesForcePerSquareMeterInOneNewtonPerSquareMeter { get; }
        protected abstract double TonnesForcePerSquareMillimeterInOneNewtonPerSquareMeter { get; }
        protected abstract double TorrsInOneNewtonPerSquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AtmospheresTolerance { get { return 1e-5; } }
        protected virtual double BarsTolerance { get { return 1e-5; } }
        protected virtual double CentibarsTolerance { get { return 1e-5; } }
        protected virtual double DecapascalsTolerance { get { return 1e-5; } }
        protected virtual double DecibarsTolerance { get { return 1e-5; } }
        protected virtual double GigapascalsTolerance { get { return 1e-5; } }
        protected virtual double HectopascalsTolerance { get { return 1e-5; } }
        protected virtual double KilobarsTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilopascalsTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerSquareFootTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerSquareInchTolerance { get { return 1e-5; } }
        protected virtual double MegabarsTolerance { get { return 1e-5; } }
        protected virtual double MegapascalsTolerance { get { return 1e-5; } }
        protected virtual double MicropascalsTolerance { get { return 1e-5; } }
        protected virtual double MillibarsTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double PascalsTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerSquareFootTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerSquareInchTolerance { get { return 1e-5; } }
        protected virtual double PsiTolerance { get { return 1e-5; } }
        protected virtual double TechnicalAtmospheresTolerance { get { return 1e-5; } }
        protected virtual double TonnesForcePerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesForcePerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesForcePerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double TorrsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Test]
        public void NewtonPerSquareMeterToElasticityUnits()
        {
            Elasticity newtonpersquaremeter = Elasticity.FromNewtonsPerSquareMeter(1);
            Assert.AreEqual(AtmospheresInOneNewtonPerSquareMeter, newtonpersquaremeter.Atmospheres, AtmospheresTolerance);
            Assert.AreEqual(BarsInOneNewtonPerSquareMeter, newtonpersquaremeter.Bars, BarsTolerance);
            Assert.AreEqual(CentibarsInOneNewtonPerSquareMeter, newtonpersquaremeter.Centibars, CentibarsTolerance);
            Assert.AreEqual(DecapascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.Decapascals, DecapascalsTolerance);
            Assert.AreEqual(DecibarsInOneNewtonPerSquareMeter, newtonpersquaremeter.Decibars, DecibarsTolerance);
            Assert.AreEqual(GigapascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.Gigapascals, GigapascalsTolerance);
            Assert.AreEqual(HectopascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.Hectopascals, HectopascalsTolerance);
            Assert.AreEqual(KilobarsInOneNewtonPerSquareMeter, newtonpersquaremeter.Kilobars, KilobarsTolerance);
            Assert.AreEqual(KilogramsForcePerSquareCentimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.KilogramsForcePerSquareCentimeter, KilogramsForcePerSquareCentimeterTolerance);
            Assert.AreEqual(KilogramsForcePerSquareMeterInOneNewtonPerSquareMeter, newtonpersquaremeter.KilogramsForcePerSquareMeter, KilogramsForcePerSquareMeterTolerance);
            Assert.AreEqual(KilogramsForcePerSquareMillimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.KilogramsForcePerSquareMillimeter, KilogramsForcePerSquareMillimeterTolerance);
            Assert.AreEqual(KilonewtonsPerSquareCentimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.KilonewtonsPerSquareCentimeter, KilonewtonsPerSquareCentimeterTolerance);
            Assert.AreEqual(KilonewtonsPerSquareMeterInOneNewtonPerSquareMeter, newtonpersquaremeter.KilonewtonsPerSquareMeter, KilonewtonsPerSquareMeterTolerance);
            Assert.AreEqual(KilonewtonsPerSquareMillimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.KilonewtonsPerSquareMillimeter, KilonewtonsPerSquareMillimeterTolerance);
            Assert.AreEqual(KilopascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.Kilopascals, KilopascalsTolerance);
            Assert.AreEqual(KilopoundsForcePerSquareFootInOneNewtonPerSquareMeter, newtonpersquaremeter.KilopoundsForcePerSquareFoot, KilopoundsForcePerSquareFootTolerance);
            Assert.AreEqual(KilopoundsForcePerSquareInchInOneNewtonPerSquareMeter, newtonpersquaremeter.KilopoundsForcePerSquareInch, KilopoundsForcePerSquareInchTolerance);
            Assert.AreEqual(MegabarsInOneNewtonPerSquareMeter, newtonpersquaremeter.Megabars, MegabarsTolerance);
            Assert.AreEqual(MegapascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.Megapascals, MegapascalsTolerance);
            Assert.AreEqual(MicropascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.Micropascals, MicropascalsTolerance);
            Assert.AreEqual(MillibarsInOneNewtonPerSquareMeter, newtonpersquaremeter.Millibars, MillibarsTolerance);
            Assert.AreEqual(NewtonsPerSquareCentimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.NewtonsPerSquareCentimeter, NewtonsPerSquareCentimeterTolerance);
            Assert.AreEqual(NewtonsPerSquareMeterInOneNewtonPerSquareMeter, newtonpersquaremeter.NewtonsPerSquareMeter, NewtonsPerSquareMeterTolerance);
            Assert.AreEqual(NewtonsPerSquareMillimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.NewtonsPerSquareMillimeter, NewtonsPerSquareMillimeterTolerance);
            Assert.AreEqual(PascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.Pascals, PascalsTolerance);
            Assert.AreEqual(PoundsForcePerSquareFootInOneNewtonPerSquareMeter, newtonpersquaremeter.PoundsForcePerSquareFoot, PoundsForcePerSquareFootTolerance);
            Assert.AreEqual(PoundsForcePerSquareInchInOneNewtonPerSquareMeter, newtonpersquaremeter.PoundsForcePerSquareInch, PoundsForcePerSquareInchTolerance);
            Assert.AreEqual(PsiInOneNewtonPerSquareMeter, newtonpersquaremeter.Psi, PsiTolerance);
            Assert.AreEqual(TechnicalAtmospheresInOneNewtonPerSquareMeter, newtonpersquaremeter.TechnicalAtmospheres, TechnicalAtmospheresTolerance);
            Assert.AreEqual(TonnesForcePerSquareCentimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.TonnesForcePerSquareCentimeter, TonnesForcePerSquareCentimeterTolerance);
            Assert.AreEqual(TonnesForcePerSquareMeterInOneNewtonPerSquareMeter, newtonpersquaremeter.TonnesForcePerSquareMeter, TonnesForcePerSquareMeterTolerance);
            Assert.AreEqual(TonnesForcePerSquareMillimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.TonnesForcePerSquareMillimeter, TonnesForcePerSquareMillimeterTolerance);
            Assert.AreEqual(TorrsInOneNewtonPerSquareMeter, newtonpersquaremeter.Torrs, TorrsTolerance);
        }

        [Test]
        public void FromValueAndUnit()
        {
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Atmosphere).Atmospheres, AtmospheresTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Bar).Bars, BarsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Centibar).Centibars, CentibarsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Decapascal).Decapascals, DecapascalsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Decibar).Decibars, DecibarsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Gigapascal).Gigapascals, GigapascalsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Hectopascal).Hectopascals, HectopascalsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Kilobar).Kilobars, KilobarsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.KilogramForcePerSquareCentimeter).KilogramsForcePerSquareCentimeter, KilogramsForcePerSquareCentimeterTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.KilogramForcePerSquareMeter).KilogramsForcePerSquareMeter, KilogramsForcePerSquareMeterTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.KilogramForcePerSquareMillimeter).KilogramsForcePerSquareMillimeter, KilogramsForcePerSquareMillimeterTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.KilonewtonPerSquareCentimeter).KilonewtonsPerSquareCentimeter, KilonewtonsPerSquareCentimeterTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.KilonewtonPerSquareMeter).KilonewtonsPerSquareMeter, KilonewtonsPerSquareMeterTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.KilonewtonPerSquareMillimeter).KilonewtonsPerSquareMillimeter, KilonewtonsPerSquareMillimeterTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Kilopascal).Kilopascals, KilopascalsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.KilopoundForcePerSquareFoot).KilopoundsForcePerSquareFoot, KilopoundsForcePerSquareFootTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.KilopoundForcePerSquareInch).KilopoundsForcePerSquareInch, KilopoundsForcePerSquareInchTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Megabar).Megabars, MegabarsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Megapascal).Megapascals, MegapascalsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Micropascal).Micropascals, MicropascalsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Millibar).Millibars, MillibarsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.NewtonPerSquareCentimeter).NewtonsPerSquareCentimeter, NewtonsPerSquareCentimeterTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.NewtonPerSquareMeter).NewtonsPerSquareMeter, NewtonsPerSquareMeterTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.NewtonPerSquareMillimeter).NewtonsPerSquareMillimeter, NewtonsPerSquareMillimeterTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Pascal).Pascals, PascalsTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.PoundForcePerSquareFoot).PoundsForcePerSquareFoot, PoundsForcePerSquareFootTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.PoundForcePerSquareInch).PoundsForcePerSquareInch, PoundsForcePerSquareInchTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Psi).Psi, PsiTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.TechnicalAtmosphere).TechnicalAtmospheres, TechnicalAtmospheresTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.TonneForcePerSquareCentimeter).TonnesForcePerSquareCentimeter, TonnesForcePerSquareCentimeterTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.TonneForcePerSquareMeter).TonnesForcePerSquareMeter, TonnesForcePerSquareMeterTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.TonneForcePerSquareMillimeter).TonnesForcePerSquareMillimeter, TonnesForcePerSquareMillimeterTolerance);
            Assert.AreEqual(1, Elasticity.From(1, ElasticityUnit.Torr).Torrs, TorrsTolerance);
        }

        [Test]
        public void As()
        {
            var newtonpersquaremeter = Elasticity.FromNewtonsPerSquareMeter(1);
            Assert.AreEqual(AtmospheresInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Atmosphere), AtmospheresTolerance);
            Assert.AreEqual(BarsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Bar), BarsTolerance);
            Assert.AreEqual(CentibarsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Centibar), CentibarsTolerance);
            Assert.AreEqual(DecapascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Decapascal), DecapascalsTolerance);
            Assert.AreEqual(DecibarsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Decibar), DecibarsTolerance);
            Assert.AreEqual(GigapascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Gigapascal), GigapascalsTolerance);
            Assert.AreEqual(HectopascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Hectopascal), HectopascalsTolerance);
            Assert.AreEqual(KilobarsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Kilobar), KilobarsTolerance);
            Assert.AreEqual(KilogramsForcePerSquareCentimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.KilogramForcePerSquareCentimeter), KilogramsForcePerSquareCentimeterTolerance);
            Assert.AreEqual(KilogramsForcePerSquareMeterInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.KilogramForcePerSquareMeter), KilogramsForcePerSquareMeterTolerance);
            Assert.AreEqual(KilogramsForcePerSquareMillimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.KilogramForcePerSquareMillimeter), KilogramsForcePerSquareMillimeterTolerance);
            Assert.AreEqual(KilonewtonsPerSquareCentimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.KilonewtonPerSquareCentimeter), KilonewtonsPerSquareCentimeterTolerance);
            Assert.AreEqual(KilonewtonsPerSquareMeterInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.KilonewtonPerSquareMeter), KilonewtonsPerSquareMeterTolerance);
            Assert.AreEqual(KilonewtonsPerSquareMillimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.KilonewtonPerSquareMillimeter), KilonewtonsPerSquareMillimeterTolerance);
            Assert.AreEqual(KilopascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Kilopascal), KilopascalsTolerance);
            Assert.AreEqual(KilopoundsForcePerSquareFootInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.KilopoundForcePerSquareFoot), KilopoundsForcePerSquareFootTolerance);
            Assert.AreEqual(KilopoundsForcePerSquareInchInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.KilopoundForcePerSquareInch), KilopoundsForcePerSquareInchTolerance);
            Assert.AreEqual(MegabarsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Megabar), MegabarsTolerance);
            Assert.AreEqual(MegapascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Megapascal), MegapascalsTolerance);
            Assert.AreEqual(MicropascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Micropascal), MicropascalsTolerance);
            Assert.AreEqual(MillibarsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Millibar), MillibarsTolerance);
            Assert.AreEqual(NewtonsPerSquareCentimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.NewtonPerSquareCentimeter), NewtonsPerSquareCentimeterTolerance);
            Assert.AreEqual(NewtonsPerSquareMeterInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.NewtonPerSquareMeter), NewtonsPerSquareMeterTolerance);
            Assert.AreEqual(NewtonsPerSquareMillimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.NewtonPerSquareMillimeter), NewtonsPerSquareMillimeterTolerance);
            Assert.AreEqual(PascalsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Pascal), PascalsTolerance);
            Assert.AreEqual(PoundsForcePerSquareFootInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.PoundForcePerSquareFoot), PoundsForcePerSquareFootTolerance);
            Assert.AreEqual(PoundsForcePerSquareInchInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.PoundForcePerSquareInch), PoundsForcePerSquareInchTolerance);
            Assert.AreEqual(PsiInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Psi), PsiTolerance);
            Assert.AreEqual(TechnicalAtmospheresInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.TechnicalAtmosphere), TechnicalAtmospheresTolerance);
            Assert.AreEqual(TonnesForcePerSquareCentimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.TonneForcePerSquareCentimeter), TonnesForcePerSquareCentimeterTolerance);
            Assert.AreEqual(TonnesForcePerSquareMeterInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.TonneForcePerSquareMeter), TonnesForcePerSquareMeterTolerance);
            Assert.AreEqual(TonnesForcePerSquareMillimeterInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.TonneForcePerSquareMillimeter), TonnesForcePerSquareMillimeterTolerance);
            Assert.AreEqual(TorrsInOneNewtonPerSquareMeter, newtonpersquaremeter.As(ElasticityUnit.Torr), TorrsTolerance);
        }

        [Test]
        public void ConversionRoundTrip()
        {
            Elasticity newtonpersquaremeter = Elasticity.FromNewtonsPerSquareMeter(1);
            Assert.AreEqual(1, Elasticity.FromAtmospheres(newtonpersquaremeter.Atmospheres).NewtonsPerSquareMeter, AtmospheresTolerance);
            Assert.AreEqual(1, Elasticity.FromBars(newtonpersquaremeter.Bars).NewtonsPerSquareMeter, BarsTolerance);
            Assert.AreEqual(1, Elasticity.FromCentibars(newtonpersquaremeter.Centibars).NewtonsPerSquareMeter, CentibarsTolerance);
            Assert.AreEqual(1, Elasticity.FromDecapascals(newtonpersquaremeter.Decapascals).NewtonsPerSquareMeter, DecapascalsTolerance);
            Assert.AreEqual(1, Elasticity.FromDecibars(newtonpersquaremeter.Decibars).NewtonsPerSquareMeter, DecibarsTolerance);
            Assert.AreEqual(1, Elasticity.FromGigapascals(newtonpersquaremeter.Gigapascals).NewtonsPerSquareMeter, GigapascalsTolerance);
            Assert.AreEqual(1, Elasticity.FromHectopascals(newtonpersquaremeter.Hectopascals).NewtonsPerSquareMeter, HectopascalsTolerance);
            Assert.AreEqual(1, Elasticity.FromKilobars(newtonpersquaremeter.Kilobars).NewtonsPerSquareMeter, KilobarsTolerance);
            Assert.AreEqual(1, Elasticity.FromKilogramsForcePerSquareCentimeter(newtonpersquaremeter.KilogramsForcePerSquareCentimeter).NewtonsPerSquareMeter, KilogramsForcePerSquareCentimeterTolerance);
            Assert.AreEqual(1, Elasticity.FromKilogramsForcePerSquareMeter(newtonpersquaremeter.KilogramsForcePerSquareMeter).NewtonsPerSquareMeter, KilogramsForcePerSquareMeterTolerance);
            Assert.AreEqual(1, Elasticity.FromKilogramsForcePerSquareMillimeter(newtonpersquaremeter.KilogramsForcePerSquareMillimeter).NewtonsPerSquareMeter, KilogramsForcePerSquareMillimeterTolerance);
            Assert.AreEqual(1, Elasticity.FromKilonewtonsPerSquareCentimeter(newtonpersquaremeter.KilonewtonsPerSquareCentimeter).NewtonsPerSquareMeter, KilonewtonsPerSquareCentimeterTolerance);
            Assert.AreEqual(1, Elasticity.FromKilonewtonsPerSquareMeter(newtonpersquaremeter.KilonewtonsPerSquareMeter).NewtonsPerSquareMeter, KilonewtonsPerSquareMeterTolerance);
            Assert.AreEqual(1, Elasticity.FromKilonewtonsPerSquareMillimeter(newtonpersquaremeter.KilonewtonsPerSquareMillimeter).NewtonsPerSquareMeter, KilonewtonsPerSquareMillimeterTolerance);
            Assert.AreEqual(1, Elasticity.FromKilopascals(newtonpersquaremeter.Kilopascals).NewtonsPerSquareMeter, KilopascalsTolerance);
            Assert.AreEqual(1, Elasticity.FromKilopoundsForcePerSquareFoot(newtonpersquaremeter.KilopoundsForcePerSquareFoot).NewtonsPerSquareMeter, KilopoundsForcePerSquareFootTolerance);
            Assert.AreEqual(1, Elasticity.FromKilopoundsForcePerSquareInch(newtonpersquaremeter.KilopoundsForcePerSquareInch).NewtonsPerSquareMeter, KilopoundsForcePerSquareInchTolerance);
            Assert.AreEqual(1, Elasticity.FromMegabars(newtonpersquaremeter.Megabars).NewtonsPerSquareMeter, MegabarsTolerance);
            Assert.AreEqual(1, Elasticity.FromMegapascals(newtonpersquaremeter.Megapascals).NewtonsPerSquareMeter, MegapascalsTolerance);
            Assert.AreEqual(1, Elasticity.FromMicropascals(newtonpersquaremeter.Micropascals).NewtonsPerSquareMeter, MicropascalsTolerance);
            Assert.AreEqual(1, Elasticity.FromMillibars(newtonpersquaremeter.Millibars).NewtonsPerSquareMeter, MillibarsTolerance);
            Assert.AreEqual(1, Elasticity.FromNewtonsPerSquareCentimeter(newtonpersquaremeter.NewtonsPerSquareCentimeter).NewtonsPerSquareMeter, NewtonsPerSquareCentimeterTolerance);
            Assert.AreEqual(1, Elasticity.FromNewtonsPerSquareMeter(newtonpersquaremeter.NewtonsPerSquareMeter).NewtonsPerSquareMeter, NewtonsPerSquareMeterTolerance);
            Assert.AreEqual(1, Elasticity.FromNewtonsPerSquareMillimeter(newtonpersquaremeter.NewtonsPerSquareMillimeter).NewtonsPerSquareMeter, NewtonsPerSquareMillimeterTolerance);
            Assert.AreEqual(1, Elasticity.FromPascals(newtonpersquaremeter.Pascals).NewtonsPerSquareMeter, PascalsTolerance);
            Assert.AreEqual(1, Elasticity.FromPoundsForcePerSquareFoot(newtonpersquaremeter.PoundsForcePerSquareFoot).NewtonsPerSquareMeter, PoundsForcePerSquareFootTolerance);
            Assert.AreEqual(1, Elasticity.FromPoundsForcePerSquareInch(newtonpersquaremeter.PoundsForcePerSquareInch).NewtonsPerSquareMeter, PoundsForcePerSquareInchTolerance);
            Assert.AreEqual(1, Elasticity.FromPsi(newtonpersquaremeter.Psi).NewtonsPerSquareMeter, PsiTolerance);
            Assert.AreEqual(1, Elasticity.FromTechnicalAtmospheres(newtonpersquaremeter.TechnicalAtmospheres).NewtonsPerSquareMeter, TechnicalAtmospheresTolerance);
            Assert.AreEqual(1, Elasticity.FromTonnesForcePerSquareCentimeter(newtonpersquaremeter.TonnesForcePerSquareCentimeter).NewtonsPerSquareMeter, TonnesForcePerSquareCentimeterTolerance);
            Assert.AreEqual(1, Elasticity.FromTonnesForcePerSquareMeter(newtonpersquaremeter.TonnesForcePerSquareMeter).NewtonsPerSquareMeter, TonnesForcePerSquareMeterTolerance);
            Assert.AreEqual(1, Elasticity.FromTonnesForcePerSquareMillimeter(newtonpersquaremeter.TonnesForcePerSquareMillimeter).NewtonsPerSquareMeter, TonnesForcePerSquareMillimeterTolerance);
            Assert.AreEqual(1, Elasticity.FromTorrs(newtonpersquaremeter.Torrs).NewtonsPerSquareMeter, TorrsTolerance);
        }

        [Test]
        public void ArithmeticOperators()
        {
            Elasticity v = Elasticity.FromNewtonsPerSquareMeter(1);
            Assert.AreEqual(-1, -v.NewtonsPerSquareMeter, NewtonsPerSquareMeterTolerance);
            Assert.AreEqual(2, (Elasticity.FromNewtonsPerSquareMeter(3)-v).NewtonsPerSquareMeter, NewtonsPerSquareMeterTolerance);
            Assert.AreEqual(2, (v + v).NewtonsPerSquareMeter, NewtonsPerSquareMeterTolerance);
            Assert.AreEqual(10, (v*10).NewtonsPerSquareMeter, NewtonsPerSquareMeterTolerance);
            Assert.AreEqual(10, (10*v).NewtonsPerSquareMeter, NewtonsPerSquareMeterTolerance);
            Assert.AreEqual(2, (Elasticity.FromNewtonsPerSquareMeter(10)/5).NewtonsPerSquareMeter, NewtonsPerSquareMeterTolerance);
            Assert.AreEqual(2, Elasticity.FromNewtonsPerSquareMeter(10)/Elasticity.FromNewtonsPerSquareMeter(5), NewtonsPerSquareMeterTolerance);
        }

        [Test]
        public void ComparisonOperators()
        {
            Elasticity oneNewtonPerSquareMeter = Elasticity.FromNewtonsPerSquareMeter(1);
            Elasticity twoNewtonsPerSquareMeter = Elasticity.FromNewtonsPerSquareMeter(2);

            Assert.True(oneNewtonPerSquareMeter < twoNewtonsPerSquareMeter);
            Assert.True(oneNewtonPerSquareMeter <= twoNewtonsPerSquareMeter);
            Assert.True(twoNewtonsPerSquareMeter > oneNewtonPerSquareMeter);
            Assert.True(twoNewtonsPerSquareMeter >= oneNewtonPerSquareMeter);

            Assert.False(oneNewtonPerSquareMeter > twoNewtonsPerSquareMeter);
            Assert.False(oneNewtonPerSquareMeter >= twoNewtonsPerSquareMeter);
            Assert.False(twoNewtonsPerSquareMeter < oneNewtonPerSquareMeter);
            Assert.False(twoNewtonsPerSquareMeter <= oneNewtonPerSquareMeter);
        }

        [Test]
        public void CompareToIsImplemented()
        {
            Elasticity newtonpersquaremeter = Elasticity.FromNewtonsPerSquareMeter(1);
            Assert.AreEqual(0, newtonpersquaremeter.CompareTo(newtonpersquaremeter));
            Assert.Greater(newtonpersquaremeter.CompareTo(Elasticity.Zero), 0);
            Assert.Less(Elasticity.Zero.CompareTo(newtonpersquaremeter), 0);
        }

        [Test]
        [ExpectedException(typeof(ArgumentException))]
        public void CompareToThrowsOnTypeMismatch()
        {
            Elasticity newtonpersquaremeter = Elasticity.FromNewtonsPerSquareMeter(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            newtonpersquaremeter.CompareTo(new object());
        }

        [Test]
        [ExpectedException(typeof(ArgumentNullException))]
        public void CompareToThrowsOnNull()
        {
            Elasticity newtonpersquaremeter = Elasticity.FromNewtonsPerSquareMeter(1);
// ReSharper disable once ReturnValueOfPureMethodIsNotUsed
            newtonpersquaremeter.CompareTo(null);
        }


        [Test]
        public void EqualityOperators()
        {
            Elasticity a = Elasticity.FromNewtonsPerSquareMeter(1);
            Elasticity b = Elasticity.FromNewtonsPerSquareMeter(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Test]
        public void EqualsIsImplemented()
        {
            Elasticity v = Elasticity.FromNewtonsPerSquareMeter(1);
            Assert.IsTrue(v.Equals(Elasticity.FromNewtonsPerSquareMeter(1)));
            Assert.IsFalse(v.Equals(Elasticity.Zero));
        }

        [Test]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Elasticity newtonpersquaremeter = Elasticity.FromNewtonsPerSquareMeter(1);
            Assert.IsFalse(newtonpersquaremeter.Equals(new object()));
        }

        [Test]
        public void EqualsReturnsFalseOnNull()
        {
            Elasticity newtonpersquaremeter = Elasticity.FromNewtonsPerSquareMeter(1);
            Assert.IsFalse(newtonpersquaremeter.Equals(null));
        }
    }
}
