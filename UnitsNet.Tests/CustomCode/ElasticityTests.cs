//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \GenerateUnits.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/anjdreas/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyUnit.extra.cs files to add code to generated unit classes.
//     Add Extensions\MyUnitExtensions.cs to decorate unit classes with new behavior.
//     Add Scripts\UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2007 Andreas Gullberg Larsen (anjdreas@gmail.com).
// https://github.com/anjdreas/UnitsNet
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


using System;
using NUnit.Framework;

namespace UnitsNet.Tests.CustomCode
{
    public class ElasticityTests : ElasticityTestsBase
    {
        protected override double AtmospheresInOneNewtonPerSquareMeter => 9.8692 * 1E-6;

        protected override double BarsInOneNewtonPerSquareMeter => 1E-5;

        protected override double KilogramsForcePerSquareCentimeterInOneNewtonPerSquareMeter => 0.101971621e-5;

        protected override double KilogramsForcePerSquareMeterInOneNewtonPerSquareMeter => 0.101971621;

        protected override double KilogramsForcePerSquareMillimeterInOneNewtonPerSquareMeter => 0.101971621e-7;

        protected override double KilonewtonsPerSquareCentimeterInOneNewtonPerSquareMeter => 1e-7;

        protected override double KilonewtonsPerSquareMeterInOneNewtonPerSquareMeter => 0.001;

        protected override double KilonewtonsPerSquareMillimeterInOneNewtonPerSquareMeter => 1e-9;

        protected override double KilopascalsInOneNewtonPerSquareMeter => 1e-3;

        protected override double KilopoundsForcePerSquareFootInOneNewtonPerSquareMeter => 2.089e-5;

        protected override double KilopoundsForcePerSquareInchInOneNewtonPerSquareMeter => 1.45e-7;

        protected override double MegapascalsInOneNewtonPerSquareMeter => 1E-6;

        protected override double NewtonsPerSquareCentimeterInOneNewtonPerSquareMeter => 1E-4;

        protected override double NewtonsPerSquareMeterInOneNewtonPerSquareMeter => 1;

        protected override double NewtonsPerSquareMillimeterInOneNewtonPerSquareMeter => 1E-6;

        protected override double PascalsInOneNewtonPerSquareMeter => 1;

        protected override double PoundsForcePerSquareFootInOneNewtonPerSquareMeter => 0.0208854342;

        protected override double PoundsForcePerSquareInchInOneNewtonPerSquareMeter => 0.000145037738;

        protected override double PsiInOneNewtonPerSquareMeter => 1.450377 * 1E-4;

        protected override double TechnicalAtmospheresInOneNewtonPerSquareMeter => 1.0197 * 1E-5;

        protected override double TonnesForcePerSquareCentimeterInOneNewtonPerSquareMeter => 1e-8;

        protected override double TonnesForcePerSquareMeterInOneNewtonPerSquareMeter => 1e-4;

        protected override double TonnesForcePerSquareMillimeterInOneNewtonPerSquareMeter => 1e-10;

        protected override double TorrsInOneNewtonPerSquareMeter => 7.5006 * 1E-3;

        protected override double CentibarsInOneNewtonPerSquareMeter => 1e-3;

        protected override double DecapascalsInOneNewtonPerSquareMeter => 1e-1;

        protected override double DecibarsInOneNewtonPerSquareMeter => 1e-4;

        protected override double GigapascalsInOneNewtonPerSquareMeter => 1e-9;

        protected override double HectopascalsInOneNewtonPerSquareMeter => 1e-2;

        protected override double KilobarsInOneNewtonPerSquareMeter => 1e-8;

        protected override double MegabarsInOneNewtonPerSquareMeter => 1e-11;

        protected override double MicropascalsInOneNewtonPerSquareMeter => 1e6;

        protected override double MillibarsInOneNewtonPerSquareMeter => 1e-2;

        [Test]
        public void AreaTimesPressureEqualsForce()
        {
            Force force = Area.FromSquareMeters(3) * Pressure.FromPascals(20);
            Assert.AreEqual(force, Force.FromNewtons(60));
        }

        [Test]
        public void PressureTimesAreaEqualsForce()
        {
            Force force = Pressure.FromPascals(20) * Area.FromSquareMeters(3);
            Assert.AreEqual(force, Force.FromNewtons(60));
        }
    }
}
